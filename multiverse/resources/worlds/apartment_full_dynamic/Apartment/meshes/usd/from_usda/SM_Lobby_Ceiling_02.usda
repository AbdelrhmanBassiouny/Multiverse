#usda 1.0
(
    defaultPrim = "SM_Lobby_Ceiling_02"
    doc = "Blender v3.6.8"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "SM_Lobby_Ceiling_02"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "SM_Lobby_Ceiling_02" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(0.25695267, -2.16979, -0.8043747), (4.1599426, 2.634914, 1.1369854)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 1, 3, 2, 4, 5, 6, 5, 4, 7, 8, 9, 10, 9, 11, 10]
        rel material:binding = </_materials/M_Basic_Wall>
        normal3f[] normals = [(0.00062306394, -0.0009117009, -0.99999946), (0.0003744919, -0.0007306686, -0.99999964), (0.0002495444, -0.00063967076, -0.99999976), (0.0003744919, -0.0007306686, -0.99999964), (2.3054692e-7, -0.0004580982, -0.9999999), (0.0002495444, -0.00063967076, -0.99999976), (0.00041628574, -0.0015043813, -0.99999875), (0.00051745307, -0.0016212491, -0.99999857), (0.0010291665, -0.0022123759, -0.999997), (0.00051745307, -0.0016212491, -0.99999857), (0.00041628574, -0.0015043813, -0.99999875), (-0.00009739634, -0.0009109794, -0.9999996), (0, -0.5803567, -0.8143624), (-0.0006305865, -0.5799866, -0.81462574), (-0.0009589724, -0.57979363, -0.8147627), (-0.0006305865, -0.5799866, -0.81462574), (-0.0015888084, -0.5794235, -0.81502503), (-0.0009589724, -0.57979363, -0.8147627)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(1.7605712, 0.55795103, -0.80224895), (0.25756636, 0.567935, -0.80319464), (1.7626523, 2.6349084, -0.8041412), (0.25695267, 2.634914, -0.8041415), (1.7605712, 0.55795103, -0.80224895), (4.1599426, 2.6349084, -0.8043747), (4.1599426, 0.5478671, -0.79975736), (1.7626523, 2.6349084, -0.8041412), (4.1599426, -2.16979, 1.1369854), (1.755824, -2.16979, 1.1369854), (4.1599426, 0.5478671, -0.79975736), (1.7605712, 0.55795103, -0.80224895)]
        texCoord2f[] primvars:st = [(-2.2929688, 4.501953), (-0.7915039, 4.513672), (-2.296875, 6.578125), (-0.7915039, 4.513672), (-0.7910156, 6.578125), (-2.296875, 6.578125), (-2.2929688, 4.501953), (-4.6914062, 6.578125), (-4.6914062, 4.4921875), (-4.6914062, 6.578125), (-2.2929688, 4.501953), (-2.296875, 6.578125), (-4.6914062, 1.310791), (-2.2890625, 1.310791), (-4.6914062, 4.4921875), (-2.2890625, 1.310791), (-2.2929688, 4.501953), (-4.6914062, 4.4921875)] (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:st1 = [(0.25854492, 0.29833984), (0.25732422, 0.4819336), (0.0049972534, 0.29785156), (0.25732422, 0.4819336), (0.0049972534, 0.4819336), (0.0049972534, 0.29785156), (0.25854492, 0.29833984), (0.0049972534, 0.0053710938), (0.25976562, 0.0053710938), (0.0049972534, 0.0053710938), (0.25854492, 0.29833984), (0.0049972534, 0.29785156), (0.6484375, 0.0053710938), (0.6484375, 0.29882812), (0.25976562, 0.0053710938), (0.6484375, 0.29882812), (0.25854492, 0.29833984), (0.25976562, 0.0053710938)] (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:st2 = [(0.61279297, 0.60424805), (0.9916992, 0.6062012), (0.6123047, 0.99193573), (0.9916992, 0.6062012), (0.9916992, 0.99193573), (0.6123047, 0.99193573), (0.61279297, 0.60424805), (0.00806427, 0.99193573), (0.00806427, 0.6022949), (0.00806427, 0.99193573), (0.61279297, 0.60424805), (0.6123047, 0.99193573), (0.00806427, 0.008300781), (0.61376953, 0.008300781), (0.00806427, 0.6022949), (0.61376953, 0.008300781), (0.61279297, 0.60424805), (0.00806427, 0.6022949)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
    }

    def Xform "Materials"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "_materials"
{
    def Material "M_Basic_Wall"
    {
        token outputs:surface.connect = </_materials/M_Basic_Wall/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor = (1, 1, 1)
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.6392157
            float inputs:specular = 0.5
            token outputs:surface
        }
    }
}

