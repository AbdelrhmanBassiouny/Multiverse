#usda 1.0
(
    defaultPrim = "cabinet_diamondback"
    doc = "Blender v3.6.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "cabinet_diamondback"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "cabinet_diamondback" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.16179, -0.204545, 0), (0.188462, 0.194991, 1.059551)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [4, 5, 6, 7, 6, 5, 12, 13, 14, 15, 14, 13, 20, 21, 22, 23, 22, 21, 28, 29, 30, 31, 30, 29, 36, 37, 38, 39, 38, 37, 48, 49, 50, 49, 51, 50, 52, 53, 51, 50, 51, 53, 49, 48, 54, 54, 48, 52, 52, 48, 53, 55, 53, 48, 60, 61, 62, 63, 62, 61, 68, 69, 70, 71, 70, 69, 76, 77, 78, 79, 78, 77, 84, 85, 86, 87, 86, 85, 92, 93, 94, 95, 94, 93, 0, 1, 2, 1, 0, 3, 8, 9, 10, 9, 8, 11, 16, 17, 18, 17, 16, 19, 24, 25, 26, 25, 24, 27, 32, 33, 34, 33, 32, 35, 56, 57, 58, 57, 56, 59, 64, 65, 66, 65, 64, 67, 72, 73, 74, 73, 72, 75, 80, 81, 82, 81, 80, 83, 40, 41, 42, 41, 40, 43, 43, 40, 44, 44, 40, 45, 41, 46, 47, 46, 41, 43, 47, 46, 45, 47, 45, 40, 88, 89, 90, 89, 88, 91]
        rel material:binding = </_materials/material>
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0.000005606239, 0), (-1, 0.000005606239, 0), (-1, 0.000005606239, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -3.353231e-8, 0), (-1, -3.353231e-8, 0), (-1, -3.353231e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -9.539197e-8, 0), (-1, -9.539197e-8, 0), (-1, -9.539197e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 9.539197e-8, 0), (1, 9.539197e-8, 0), (1, 9.539197e-8, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 6.706462e-8, 0), (1, 6.706462e-8, 0), (1, 6.706462e-8, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0.148462, 0.194991, 0), (-0.16179, -0.204545, 0), (-0.16179, 0.194991, 0), (0.148462, -0.204545, 0), (0.148462, -0.204545, 0), (0.148462, 0.194991, 0), (-0.16179, -0.204545, 0), (-0.16179, 0.194991, 0), (0.148462, -0.204545, 1.059551), (-0.16179, -0.204545, 0), (0.148462, -0.204545, 0), (-0.16179, -0.204545, 1.059551), (-0.16179, -0.204545, 1.059551), (0.148462, -0.204545, 1.059551), (-0.16179, -0.204545, 0), (0.148462, -0.204545, 0), (-0.16179, 0.194991, 1.059551), (-0.16179, -0.204545, 0), (-0.16179, -0.204545, 1.059551), (-0.16179, 0.194991, 0), (-0.16179, 0.194991, 0), (-0.16179, 0.194991, 1.059551), (-0.16179, -0.204545, 0), (-0.16179, -0.204545, 1.059551), (-0.16179, 0.194991, 1.059551), (0.148462, 0.194991, 0), (-0.16179, 0.194991, 0), (0.148462, 0.194991, 1.059551), (0.148462, 0.194991, 1.059551), (-0.16179, 0.194991, 1.059551), (0.148462, 0.194991, 0), (-0.16179, 0.194991, 0), (0.148462, -0.204545, 1.059551), (-0.16179, 0.194991, 1.059551), (-0.16179, -0.204545, 1.059551), (0.148462, 0.194991, 1.059551), (0.148462, 0.194991, 1.059551), (0.148462, -0.204545, 1.059551), (-0.16179, 0.194991, 1.059551), (-0.16179, -0.204545, 1.059551), (0.148462, 0.194991, 0), (0.148462, -0.204545, 1.059551), (0.148462, -0.204545, 0), (0.148462, 0.165773, 0.859441), (0.148462, 0.192796, 0.859441), (0.148462, 0.192796, 1.009441), (0.148462, 0.165773, 1.009441), (0.148462, 0.194991, 1.059551), (0.148462, 0.194991, 0), (0.148462, 0.192796, 1.009441), (0.148462, 0.194991, 1.059551), (0.148462, 0.165773, 1.009441), (0.148462, 0.165773, 0.859441), (0.148462, -0.204545, 1.059551), (0.148462, 0.192796, 0.859441), (0.148462, -0.204545, 0), (0.188462, 0.192796, 0.859441), (0.148462, 0.165773, 0.859441), (0.148462, 0.192796, 0.859441), (0.188462, 0.165773, 0.859441), (0.188462, 0.165773, 0.859441), (0.188462, 0.192796, 0.859441), (0.148462, 0.165773, 0.859441), (0.148462, 0.192796, 0.859441), (0.148462, 0.192796, 1.009441), (0.188462, 0.192796, 0.859441), (0.148462, 0.192796, 0.859441), (0.188462, 0.192796, 1.009441), (0.188462, 0.192796, 1.009441), (0.148462, 0.192796, 1.009441), (0.188462, 0.192796, 0.859441), (0.148462, 0.192796, 0.859441), (0.188462, 0.165773, 1.009441), (0.148462, 0.165773, 0.859441), (0.188462, 0.165773, 0.859441), (0.148462, 0.165773, 1.009441), (0.148462, 0.165773, 1.009441), (0.188462, 0.165773, 1.009441), (0.148462, 0.165773, 0.859441), (0.188462, 0.165773, 0.859441), (0.188462, 0.165773, 1.009441), (0.148462, 0.192796, 1.009441), (0.148462, 0.165773, 1.009441), (0.188462, 0.192796, 1.009441), (0.188462, 0.192796, 1.009441), (0.188462, 0.165773, 1.009441), (0.148462, 0.192796, 1.009441), (0.148462, 0.165773, 1.009441), (0.188462, 0.192796, 0.859441), (0.188462, 0.165773, 1.009441), (0.188462, 0.165773, 0.859441), (0.188462, 0.192796, 1.009441), (0.188462, 0.192796, 1.009441), (0.188462, 0.192796, 0.859441), (0.188462, 0.165773, 1.009441), (0.188462, 0.165773, 0.859441)]
        texCoord2f[] primvars:UVMap = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0.301102, -0.37708), (0, 0), (0, -0.37708), (0, 0), (0.301102, -0.37708), (0.301102, 0), (0.301102, 1), (0, 0), (0.301102, 0), (0, 0), (0.301102, 1), (0, 1), (-0.387752, 1), (0, 0), (0, 1), (0, 0), (-0.387752, 1), (-0.387752, 0), (-0.387752, 1), (-0.688854, 0), (-0.387752, 0), (-0.688854, 0), (-0.387752, 1), (-0.688854, 1), (0.301102, 1), (-0, 1.37708), (0, 1), (-0, 1.37708), (0.301102, 1), (0.301102, 1.37708), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

        def GeomSubset "material" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
            rel material:binding = </_materials/material>
        }

        def GeomSubset "texture_white" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]
            rel material:binding = </_materials/texture_white>
        }

        def GeomSubset "schrank_diamondback" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [46, 47, 48, 49, 50, 51, 52, 53]
            rel material:binding = </_materials/schrank_diamondback>
        }

        def GeomSubset "schrank_diamondback_0" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [54, 55]
            rel material:binding = </_materials/schrank_diamondback_0>
        }
    }
}

def "_materials"
{
    def Material "material"
    {
        token outputs:surface.connect = </_materials/material/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor = (1, 1, 1)
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }
    }

    def Material "texture_white"
    {
        token outputs:surface.connect = </_materials/texture_white/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor.connect = </_materials/texture_white/Image_Texture.outputs:rgb>
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/texture_white.jpg@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/texture_white/uvmap.outputs:result>
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }
    }

    def Material "schrank_diamondback"
    {
        token outputs:surface.connect = </_materials/schrank_diamondback/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor.connect = </_materials/schrank_diamondback/Image_Texture.outputs:rgb>
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/cabinet_diamondback.JPG@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/schrank_diamondback/uvmap.outputs:result>
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }
    }

    def Material "schrank_diamondback_0"
    {
        token outputs:surface.connect = </_materials/schrank_diamondback_0/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor.connect = </_materials/schrank_diamondback_0/Image_Texture.outputs:rgb>
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/cabinet_diamondback_0.JPG@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/schrank_diamondback_0/uvmap.outputs:result>
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }
    }
}

