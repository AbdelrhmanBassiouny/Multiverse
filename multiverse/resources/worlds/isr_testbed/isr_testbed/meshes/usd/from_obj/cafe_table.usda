#usda 1.0
(
    defaultPrim = "cafe_table"
    doc = "Blender v3.6.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "cafe_table"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "cafe_table" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.4572, -0.4572, 0), (0.4572, 0.4572, 0.7747)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [0, 1, 2, 1, 0, 3, 4, 5, 6, 7, 6, 5, 8, 9, 10, 9, 8, 11, 12, 13, 14, 15, 14, 13, 16, 17, 18, 17, 16, 19, 20, 21, 22, 23, 22, 21, 24, 25, 26, 25, 24, 27, 28, 29, 30, 31, 30, 29, 32, 33, 34, 33, 32, 35, 36, 37, 38, 39, 38, 37, 40, 41, 42, 43, 44, 45, 46, 11, 47, 11, 46, 9, 14, 48, 12, 49, 12, 48, 8, 50, 51, 50, 8, 10, 15, 13, 52, 53, 52, 13, 54, 55, 56, 55, 54, 57, 58, 59, 60, 61, 60, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 50, 47, 51, 47, 50, 46, 48, 52, 49, 53, 49, 52, 74, 75, 76, 77, 78, 79, 84, 85, 86, 87, 86, 85, 92, 93, 94, 95, 94, 93, 100, 101, 102, 103, 102, 101, 108, 109, 110, 111, 110, 109, 112, 113, 114, 113, 112, 115, 116, 117, 118, 119, 118, 117, 120, 121, 122, 121, 120, 123, 124, 125, 126, 127, 126, 125, 80, 81, 82, 81, 80, 83, 88, 89, 90, 89, 88, 91, 96, 97, 98, 97, 96, 99, 104, 105, 106, 105, 104, 107]
        rel material:binding = </_materials/Blue1>
        normal3f[] normals = [(0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0.09728049, -0.09728049, 0.99049133), (0.09728049, 0.09728052, 0.9904913), (0.09728049, -0.09728052, 0.9904913), (0.09728049, 0.09728052, 0.9904913), (0.09728049, -0.09728049, 0.99049133), (0.097280346, 0.09728061, 0.9904913), (-0.097280346, -0.09728061, -0.9904913), (-0.09728049, 0.09728049, -0.99049133), (-0.09728049, -0.09728052, -0.9904913), (-0.09728049, 0.09728052, -0.9904913), (-0.09728049, -0.09728052, -0.9904913), (-0.09728049, 0.09728049, -0.99049133), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.09728049, 0.097280495, 0.9904913), (0.097280346, 0.09728061, 0.9904913), (-0.09728061, 0.097280346, 0.9904913), (0.097280346, 0.09728061, 0.9904913), (-0.09728049, 0.097280495, 0.9904913), (0.09728049, 0.09728052, 0.9904913), (-0.09728049, -0.09728052, -0.9904913), (0.09728049, -0.097280495, -0.9904913), (-0.097280346, -0.09728061, -0.9904913), (0.09728061, -0.097280346, -0.9904913), (-0.097280346, -0.09728061, -0.9904913), (0.09728049, -0.097280495, -0.9904913), (0.09728049, -0.09728049, 0.99049133), (-0.09728047, -0.09728049, 0.9904913), (-0.09728048, -0.09728048, 0.99049133), (-0.09728047, -0.09728049, 0.9904913), (0.09728049, -0.09728049, 0.99049133), (0.09728049, -0.09728052, 0.9904913), (-0.09728049, 0.09728052, -0.9904913), (-0.09728049, 0.09728049, -0.99049133), (0.09728047, 0.09728049, -0.9904913), (0.09728048, 0.09728048, -0.99049133), (0.09728047, 0.09728049, -0.9904913), (-0.09728049, 0.09728049, -0.99049133), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.09728047, -0.09728049, 0.9904913), (-0.09728061, 0.097280346, 0.9904913), (-0.09728048, -0.09728048, 0.99049133), (-0.09728061, 0.097280346, 0.9904913), (-0.09728047, -0.09728049, 0.9904913), (-0.09728049, 0.097280495, 0.9904913), (0.09728049, -0.097280495, -0.9904913), (0.09728047, 0.09728049, -0.9904913), (0.09728061, -0.097280346, -0.9904913), (0.09728048, 0.09728048, -0.99049133), (0.09728061, -0.097280346, -0.9904913), (0.09728047, 0.09728049, -0.9904913), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0.020782, 0.020782, 0.0508), (0.020782, -0.020782, 0.7366), (0.020782, -0.020782, 0.0508), (0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.0508), (0.020782, -0.020782, 0.7366), (0.020782, -0.020782, 0.0508), (0.2794, -0.2794, 0), (0.020782, 0.020782, 0.0508), (0.020782, -0.020782, 0.0508), (0.2794, 0.2794, 0), (0.2794, 0.2794, 0), (0.2794, -0.2794, 0), (0.020782, 0.020782, 0.0508), (0.020782, -0.020782, 0.0508), (-0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.0508), (-0.020782, 0.020782, 0.0508), (0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.7366), (-0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.0508), (-0.020782, 0.020782, 0.0508), (0.020782, -0.020782, 0.7366), (-0.020782, 0.020782, 0.7366), (-0.020782, -0.020782, 0.7366), (0.020782, 0.020782, 0.7366), (0.020782, 0.020782, 0.7366), (0.020782, -0.020782, 0.7366), (-0.020782, 0.020782, 0.7366), (-0.020782, -0.020782, 0.7366), (0.020782, -0.020782, 0.7366), (-0.020782, -0.020782, 0.0508), (0.020782, -0.020782, 0.0508), (-0.020782, -0.020782, 0.7366), (-0.020782, -0.020782, 0.7366), (0.020782, -0.020782, 0.7366), (-0.020782, -0.020782, 0.0508), (0.020782, -0.020782, 0.0508), (0.2794, 0.2794, 0), (0.2794, -0.2794, 0), (0, 0, 0), (0, 0, 0), (0.2794, -0.2794, 0), (0.2794, 0.2794, 0), (-0.020782, 0.020782, 0.0508), (-0.2794, 0.2794, 0), (-0.020782, 0.020782, 0.0508), (-0.2794, 0.2794, 0), (-0.020782, -0.020782, 0.0508), (-0.2794, -0.2794, 0), (-0.020782, -0.020782, 0.0508), (-0.2794, -0.2794, 0), (-0.020782, 0.020782, 0.7366), (-0.020782, -0.020782, 0.0508), (-0.020782, -0.020782, 0.7366), (-0.020782, 0.020782, 0.0508), (-0.020782, 0.020782, 0.0508), (-0.020782, 0.020782, 0.7366), (-0.020782, -0.020782, 0.0508), (-0.020782, -0.020782, 0.7366), (0.2794, -0.2794, 0), (-0.2794, -0.2794, 0), (0, 0, 0), (0, 0, 0), (-0.2794, -0.2794, 0), (0.2794, -0.2794, 0), (0.2794, 0.2794, 0), (0, 0, 0), (-0.2794, 0.2794, 0), (-0.2794, 0.2794, 0), (0, 0, 0), (0.2794, 0.2794, 0), (0, 0, 0), (-0.2794, -0.2794, 0), (-0.2794, 0.2794, 0), (-0.2794, 0.2794, 0), (-0.2794, -0.2794, 0), (0, 0, 0), (0.4572, 0.4572, 0.7366), (0.4572, -0.4572, 0.7747), (0.4572, -0.4572, 0.7366), (0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7366), (0.4572, -0.4572, 0.7747), (0.4572, -0.4572, 0.7366), (-0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7366), (-0.4572, 0.4572, 0.7366), (0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7747), (-0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7366), (-0.4572, 0.4572, 0.7366), (0.4572, -0.4572, 0.7747), (-0.4572, -0.4572, 0.7366), (0.4572, -0.4572, 0.7366), (-0.4572, -0.4572, 0.7747), (-0.4572, -0.4572, 0.7747), (0.4572, -0.4572, 0.7747), (-0.4572, -0.4572, 0.7366), (0.4572, -0.4572, 0.7366), (-0.4572, 0.4572, 0.7747), (-0.4572, -0.4572, 0.7366), (-0.4572, -0.4572, 0.7747), (-0.4572, 0.4572, 0.7366), (-0.4572, 0.4572, 0.7366), (-0.4572, 0.4572, 0.7747), (-0.4572, -0.4572, 0.7366), (-0.4572, -0.4572, 0.7747), (0.4572, -0.4572, 0.7747), (-0.4572, 0.4572, 0.7747), (-0.4572, -0.4572, 0.7747), (0.4572, 0.4572, 0.7747), (0.4572, 0.4572, 0.7747), (0.4572, -0.4572, 0.7747), (-0.4572, 0.4572, 0.7747), (-0.4572, -0.4572, 0.7747), (0.4572, 0.4572, 0.7366), (-0.4572, -0.4572, 0.7366), (-0.4572, 0.4572, 0.7366), (0.4572, -0.4572, 0.7366), (0.4572, -0.4572, 0.7366), (0.4572, 0.4572, 0.7366), (-0.4572, -0.4572, 0.7366), (-0.4572, 0.4572, 0.7366)]
        texCoord2f[] primvars:UVMap = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0.75, 0.0625), (0.75, 0), (-0.75, 0.0625), (-0.75, 0), (-0.75, 0.0625), (0.75, 0), (-0.75, 0.0625), (0.75, 0.0625), (-0.75, 0), (0.75, 0), (-0.75, 0), (0.75, 0.0625), (-0.75, 0.0625), (0.75, 0.0625), (-0.75, 0), (0.75, 0), (-0.75, 0), (0.75, 0.0625), (-0.75, 0), (-0.75, 0.0625), (0.75, 0), (0.75, 0.0625), (0.75, 0), (-0.75, 0.0625), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0.15, 0), (-0.15, 1.5), (-0.15, 0), (-0.15, 1.5), (0.15, 0), (0.15, 1.5), (0.15, 1.5), (-0.15, 0), (0.15, 0), (-0.15, 0), (0.15, 1.5), (-0.15, 1.5), (0.15, 1.5), (-0.15, 0), (0.15, 0), (-0.15, 0), (0.15, 1.5), (-0.15, 1.5), (-0.15, 1.5), (0.15, 0), (0.15, 1.5), (0.15, 0), (-0.15, 1.5), (-0.15, 0)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

        def GeomSubset "Blue1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]
            rel material:binding = </_materials/Blue1>
        }

        def GeomSubset "Maple" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
            rel material:binding = </_materials/Maple>
        }

        def GeomSubset "Wood_Floor_Dark" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [60, 61, 62, 63, 64, 65, 66, 67]
            rel material:binding = </_materials/Wood_Floor_Dark>
        }
    }
}

def "_materials"
{
    def Material "Blue1"
    {
        token outputs:surface.connect = </_materials/Blue1/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor.connect = </_materials/Blue1/Image_Texture.outputs:rgb>
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/Wood_Floor_Dark.jpg@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/Blue1/uvmap.outputs:result>
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }
    }

    def Material "Maple"
    {
        token outputs:surface.connect = </_materials/Maple/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor.connect = </_materials/Maple/Image_Texture.outputs:rgb>
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/Maple.jpg@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/Maple/uvmap.outputs:result>
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }
    }

    def Material "Wood_Floor_Dark"
    {
        token outputs:surface.connect = </_materials/Wood_Floor_Dark/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            float3 inputs:diffuseColor = (0.8, 0.8, 0.8)
            float3 inputs:emissiveColor = (0, 0, 0)
            float inputs:ior = 1.45
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:roughness = 0.5
            float inputs:specular = 0.5
            token outputs:surface
        }
    }
}

