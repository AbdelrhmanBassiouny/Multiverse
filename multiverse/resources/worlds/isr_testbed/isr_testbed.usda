#usda 1.0
(
    defaultPrim = "isr_testbed"
    metersPerUnit = 1
    upAxis = "Z"
)

def Urdf "urdf"
{
    string urdf:name = "isr_testbed"

    def UrdfRobot "robot"
    {
        def UrdfMaterial "materials"
        {
            def UrdfMaterial "_1___Default"
            {
                asset urdf:material:texture = @./isr_testbed/textures/Construction_Cone_Diffuse.png@
            }

            def UrdfMaterial "Blue1"
            {
                asset urdf:material:texture = @./isr_testbed/textures/Wood_Floor_Dark.jpg@
            }

            def UrdfMaterial "Firehydrant"
            {
                asset urdf:material:texture = @./isr_testbed/textures/fire_hydrant_diffuse.png@
            }

            def UrdfMaterial "Branch_2"
            {
                color4f urdf:material:rgba = (0.64, 0.64, 0.64, 1)
            }

            def UrdfMaterial "v2_Skin"
            {
                asset urdf:material:texture = @./isr_testbed/textures/young_lightskinned_male_diffuse.png@
            }

            def UrdfMaterial "pizza_box_white"
            {
                asset urdf:material:texture = @./isr_testbed/textures/pizza_box_white.jpg@
            }

            def UrdfMaterial "basmati_rice_top"
            {
                asset urdf:material:texture = @./isr_testbed/textures/basmati_rice_top.jpg@
            }

            def UrdfMaterial "material"
            {
                color4f urdf:material:rgba = (1, 1, 1, 1)
            }

            def UrdfMaterial "default"
            {
                color4f urdf:material:rgba = (0.789854, 0.813333, 0.694044, 1)
            }

            def UrdfMaterial "material_2"
            {
                color4f urdf:material:rgba = (0, 0, 0, 1)
            }

            def UrdfMaterial "apple_juice_bottom"
            {
                asset urdf:material:texture = @./isr_testbed/textures/apple_juice_bottom.jpg@
            }

            def UrdfMaterial "CIMG0283"
            {
                asset urdf:material:texture = @./isr_testbed/textures/CIMG0283.JPG@
            }

            def UrdfMaterial "material_001"
            {
                color4f urdf:material:rgba = (0.643137, 0.698039, 0.733333, 1)
            }

            def UrdfMaterial "Material_001"
            {
                asset urdf:material:texture = @./isr_testbed/textures/wood_cherry_texture.jpg@
            }

            def UrdfMaterial "wohnzimmertisch"
            {
                asset urdf:material:texture = @./isr_testbed/textures/table_living_room.JPG@
            }

            def UrdfMaterial "cabinet_ikea_galant_sides"
            {
                asset urdf:material:texture = @./isr_testbed/textures/cabinet_ikea_galant_sides.jpg@
            }

            def UrdfMaterial "__Color_007_4"
            {
                asset urdf:material:texture = @./isr_testbed/textures/wood_bamboo_texture.jpg@
            }

            def UrdfMaterial "Wood_Bamboo_Medium_001"
            {
                asset urdf:material:texture = @./isr_testbed/textures/wood_bamboo_texture.jpg@
            }

            def UrdfMaterial "material_9"
            {
                asset urdf:material:texture = @./isr_testbed/textures/black_color_texture.png@
            }

            def UrdfMaterial "Material_003"
            {
                asset urdf:material:texture = @./isr_testbed/textures/dark_wood_texture.png@
            }

            def UrdfMaterial "Material"
            {
                asset urdf:material:texture = @./isr_testbed/textures/aruco_mark_0.png@
            }
        }
    }
}

def Xform "isr_testbed" (
    prepend apiSchemas = ["MujocoBodyAPI"]
)
{
    point3f mujoco:body:pos = (0, 0, 0)
    quatf mujoco:body:quat = (1, 0, 0, 0)

    def Xform "world" (
        prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
    )
    {
        point3f mujoco:body:pos = (0, 0, 0)
        quatf mujoco:body:quat = (1, 0, 0, 0)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "walls" (
            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
        )
        {
            point3f mujoco:body:pos = (0.49183, 0.433522, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.49183, 0.433522, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "walls__walls__Door_4" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (10.0316, 804.378, 807.07776)
                float mujoco:body:inertial:mass = 54.36
                point3f mujoco:body:inertial:pos = (-0.44425, -3.76409, 0.6)
                quatf mujoco:body:inertial:quat = (0.55791414, 0.49685895, 0.51525164, 0.41997474)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.44425, -3.76409, 0.6)
                float3 physics:diagonalInertia = (10.0316, 804.378, 807.07776)
                float physics:mass = 54.36
                quatf physics:principalAxes = (0.55791414, 0.49685895, 0.51525164, 0.41997474)
                float urdf:link:inertial:inertia:ixx = 10.0316
                float urdf:link:inertial:inertia:iyy = 804.378
                float urdf:link:inertial:inertia:izz = 807.07776
                float urdf:link:inertial:mass = 54.36
                float3 urdf:link:inertial:origin:rpy = (1.5958177, 0.15825567, 1.4527771)
                point3f urdf:link:inertial:origin:xyz = (-0.44425, -3.76409, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Door_4_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.44425, -3.76409, 0.6)
                    quatf mujoco:geom:quat = (0.9999999, 0, 0, -0.00048)
                    vector3f mujoco:geom:size = (0.453, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (0.906, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, 0, -0.00096)
                    point3f urdf:visual:origin:xyz = (-0.44425, -3.76409, 0.6)
                    matrix4d xformOp:transform = ( (0.452999791257616, -0.00043487993320243524, 0, 0), (0.000023999996313600182, 0.024999988480000887, 0, 0), (0, 0, 0.6, 0), (-0.44425, -3.76409, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Door_4_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.44425, -3.76409, 0.6)
                    quatf mujoco:geom:quat = (0.9999999, 0, 0, -0.00048)
                    vector3f mujoco:geom:size = (0.453, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, 0, -0.00096)
                    point3f urdf:collision:origin:xyz = (-0.44425, -3.76409, 0.6)
                    float3 urdf:geometry:box:size = (0.906, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.452999791257616, -0.00043487993320243524, 0, 0), (0.000023999996313600182, 0.024999988480000887, 0, 0), (0, 0, 0.6, 0), (-0.44425, -3.76409, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_19" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (15.639325, 964.9898, 969.0312)
                float mujoco:body:inertial:mass = 95
                point3f mujoco:body:inertial:pos = (-2.66199, 1.59399, 0.5)
                quatf mujoco:body:inertial:quat = (0.8592931, 0.43427384, -0.043483764, -0.2667036)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-2.66199, 1.59399, 0.5)
                float3 physics:diagonalInertia = (15.639325, 964.9898, 969.0312)
                float physics:mass = 95
                quatf physics:principalAxes = (0.8592931, 0.43427384, -0.043483764, -0.2667036)
                float urdf:link:inertial:inertia:ixx = 15.639325
                float urdf:link:inertial:inertia:iyy = 964.9898
                float urdf:link:inertial:inertia:izz = 969.0312
                float urdf:link:inertial:mass = 95
                float3 urdf:link:inertial:origin:rpy = (0.8933627, 0.15756536, -0.5263072)
                point3f urdf:link:inertial:origin:xyz = (-2.66199, 1.59399, 0.5)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_19_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-2.66199, 1.59399, 0.5)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.5)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (-2.66199, 1.59399, 0.5)
                    matrix4d xformOp:transform = ( (0.95, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.5, 0), (-2.66199, 1.59399, 0.5, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_19_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-2.66199, 1.59399, 0.5)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.5)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (-2.66199, 1.59399, 0.5)
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.95, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.5, 0), (-2.66199, 1.59399, 0.5, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_21" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (64.939804, 3136.5864, 3171.0286)
                float mujoco:body:inertial:mass = 129
                point3f mujoco:body:inertial:pos = (-0.022, -4.882, 0.6)
                quatf mujoco:body:inertial:quat = (-0.7041721, 0.043235954, 0.043605585, 0.70736897)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.022, -4.882, 0.6)
                float3 physics:diagonalInertia = (64.939804, 3136.5864, 3171.0286)
                float physics:mass = 129
                quatf physics:principalAxes = (-0.7041721, 0.043235954, 0.043605585, 0.70736897)
                float urdf:link:inertial:inertia:ixx = 64.939804
                float urdf:link:inertial:inertia:iyy = 3136.5864
                float urdf:link:inertial:inertia:izz = 3171.0286
                float urdf:link:inertial:mass = 129
                float3 urdf:link:inertial:origin:rpy = (0.00080544647, -0.12288828, -1.5753756)
                point3f urdf:link:inertial:origin:xyz = (-0.022, -4.882, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_21_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.022, -4.882, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.075, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (2.15, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (-0.022, -4.882, 0.6)
                    matrix4d xformOp:transform = ( (1.075, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-0.022, -4.882, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_21_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.022, -4.882, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.075, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (-0.022, -4.882, 0.6)
                    float3 urdf:geometry:box:size = (2.15, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1.075, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-0.022, -4.882, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_22" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (10.791659, 1400.2637, 1405.9973)
                float mujoco:body:inertial:mass = 69
                point3f mujoco:body:inertial:pos = (1.028, -4.332, 0.6)
                quatf mujoco:body:inertial:quat = (0.49037546, 0.3793216, 0.5609001, 0.5486694)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (1.028, -4.332, 0.6)
                float3 physics:diagonalInertia = (10.791659, 1400.2637, 1405.9973)
                float physics:mass = 69
                quatf physics:principalAxes = (0.49037546, 0.3793216, 0.5609001, 0.5486694)
                float urdf:link:inertial:inertia:ixx = 10.791659
                float urdf:link:inertial:inertia:iyy = 1400.2637
                float urdf:link:inertial:inertia:izz = 1405.9973
                float urdf:link:inertial:mass = 69
                float3 urdf:link:inertial:origin:rpy = (1.4869318, 0.13426198, 1.8063635)
                point3f urdf:link:inertial:origin:xyz = (1.028, -4.332, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_22_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.028, -4.332, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.575, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (1.15, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (1.028, -4.332, 0.6)
                    matrix4d xformOp:transform = ( (-0.0000021120929343365623, 0.5749999999961208, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (1.028, -4.332, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_22_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.028, -4.332, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.575, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (1.028, -4.332, 0.6)
                    float3 urdf:geometry:box:size = (1.15, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.0000021120929343365623, 0.5749999999961208, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (1.028, -4.332, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_23" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (53.40257, 2475.4648, 2498.7852)
                float mujoco:body:inertial:mass = 129
                point3f mujoco:body:inertial:pos = (2.078, -3.782, 0.6)
                quatf mujoco:body:inertial:quat = (0.85688394, -0.08926456, -0.027664201, -0.50696784)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (2.078, -3.782, 0.6)
                float3 physics:diagonalInertia = (53.40257, 2475.4648, 2498.7852)
                float physics:mass = 129
                quatf physics:principalAxes = (0.85688394, -0.08926456, -0.027664201, -0.50696784)
                float urdf:link:inertial:inertia:ixx = 53.40257
                float urdf:link:inertial:inertia:iyy = 2475.4648
                float urdf:link:inertial:inertia:izz = 2498.7852
                float urdf:link:inertial:mass = 129
                float3 urdf:link:inertial:origin:rpy = (-0.1264713, -0.13835956, -1.0597265)
                point3f urdf:link:inertial:origin:xyz = (2.078, -3.782, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_23_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.078, -3.782, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.075, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (2.15, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (2.078, -3.782, 0.6)
                    matrix4d xformOp:transform = ( (1.075, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (2.078, -3.782, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_23_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.078, -3.782, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.075, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (2.078, -3.782, 0.6)
                    float3 urdf:geometry:box:size = (2.15, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1.075, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (2.078, -3.782, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_24" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (8.335032, 1428.355, 1436.5562)
                float mujoco:body:inertial:mass = 69
                point3f mujoco:body:inertial:pos = (3.128, -3.232, 0.6)
                quatf mujoco:body:inertial:quat = (0.31952143, 0.23038723, 0.6647293, 0.63479346)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (3.128, -3.232, 0.6)
                float3 physics:diagonalInertia = (8.335032, 1428.355, 1436.5562)
                float physics:mass = 69
                quatf physics:principalAxes = (0.31952143, 0.23038723, 0.6647293, 0.63479346)
                float urdf:link:inertial:inertia:ixx = 8.335032
                float urdf:link:inertial:inertia:iyy = 1428.355
                float urdf:link:inertial:inertia:izz = 1436.5562
                float urdf:link:inertial:mass = 69
                float3 urdf:link:inertial:origin:rpy = (1.5605931, 0.13268286, 2.340289)
                point3f urdf:link:inertial:origin:xyz = (3.128, -3.232, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_24_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.128, -3.232, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.575, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (1.15, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (3.128, -3.232, 0.6)
                    matrix4d xformOp:transform = ( (-0.0000021120929343365623, 0.5749999999961208, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (3.128, -3.232, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_24_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.128, -3.232, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.575, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (3.128, -3.232, 0.6)
                    float3 urdf:geometry:box:size = (1.15, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.0000021120929343365623, 0.5749999999961208, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (3.128, -3.232, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_25" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (5.13415, 754.3189, 758.40546)
                float mujoco:body:inertial:mass = 39
                point3f mujoco:body:inertial:pos = (3.428, -2.682, 0.6)
                quatf mujoco:body:inertial:quat = (-0.65870893, 0.67560387, -0.18054819, 0.27760473)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (3.428, -2.682, 0.6)
                float3 physics:diagonalInertia = (5.13415, 754.3189, 758.40546)
                float physics:mass = 39
                quatf physics:principalAxes = (-0.65870893, 0.67560387, -0.18054819, 0.27760473)
                float urdf:link:inertial:inertia:ixx = 5.13415
                float urdf:link:inertial:inertia:iyy = 754.3189
                float urdf:link:inertial:inertia:izz = 758.40546
                float urdf:link:inertial:mass = 39
                float3 urdf:link:inertial:origin:rpy = (-1.5486615, -0.13767879, -0.66302514)
                point3f urdf:link:inertial:origin:xyz = (3.428, -2.682, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_25_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.428, -2.682, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (0.65, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (3.428, -2.682, 0.6)
                    matrix4d xformOp:transform = ( (0.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (3.428, -2.682, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_25_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.428, -2.682, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (3.428, -2.682, 0.6)
                    float3 urdf:geometry:box:size = (0.65, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (3.428, -2.682, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_26" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (26.42141, 2009.6642, 2014.5795)
                float mujoco:body:inertial:mass = 114
                point3f mujoco:body:inertial:pos = (3.728, -1.757, 0.6)
                quatf mujoco:body:inertial:quat = (-0.4159853, 0.8790839, -0.1679737, 0.16109833)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (3.728, -1.757, 0.6)
                float3 physics:diagonalInertia = (26.42141, 2009.6642, 2014.5795)
                float physics:mass = 114
                quatf physics:principalAxes = (-0.4159853, 0.8790839, -0.1679737, 0.16109833)
                float urdf:link:inertial:inertia:ixx = 26.42141
                float urdf:link:inertial:inertia:iyy = 2009.6642
                float urdf:link:inertial:inertia:izz = 2014.5795
                float urdf:link:inertial:mass = 114
                float3 urdf:link:inertial:origin:rpy = (-2.2247157, -0.1439857, -0.44875532)
                point3f urdf:link:inertial:origin:xyz = (3.728, -1.757, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_26_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.728, -1.757, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (3.728, -1.757, 0.6)
                    matrix4d xformOp:transform = ( (-0.00000348954484803432, 0.9499999999935909, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (3.728, -1.757, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_26_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.728, -1.757, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (3.728, -1.757, 0.6)
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.00000348954484803432, 0.9499999999935909, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (3.728, -1.757, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_27" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (6.6146784, 649.69464, 655.86273)
                float mujoco:body:inertial:mass = 54
                point3f mujoco:body:inertial:pos = (3.303, -0.832, 0.6)
                quatf mujoco:body:inertial:quat = (0.6999917, -0.69828737, 0.023055559, -0.14790122)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (3.303, -0.832, 0.6)
                float3 physics:diagonalInertia = (6.6146784, 649.69464, 655.86273)
                float physics:mass = 54
                quatf physics:principalAxes = (0.6999917, -0.69828737, 0.023055559, -0.14790122)
                float urdf:link:inertial:inertia:ixx = 6.6146784
                float urdf:link:inertial:inertia:iyy = 649.69464
                float urdf:link:inertial:inertia:izz = 655.86273
                float urdf:link:inertial:mass = 54
                float3 urdf:link:inertial:origin:rpy = (-1.5466989, -0.17517221, -0.24543309)
                point3f urdf:link:inertial:origin:xyz = (3.303, -0.832, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_27_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.303, -0.832, 0.6)
                    quatf mujoco:geom:quat = (0.0000013267949, 0, 0, 1)
                    vector3f mujoco:geom:size = (0.45, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (0.9, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 3.14159)
                    point3f urdf:visual:origin:xyz = (3.303, -0.832, 0.6)
                    matrix4d xformOp:transform = ( (-0.44999999999841567, 0.0000011941154070087285, 0, 0), (-6.633974483381825e-8, -0.02499999999991198, 0, 0), (0, 0, 0.6, 0), (3.303, -0.832, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_27_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (3.303, -0.832, 0.6)
                    quatf mujoco:geom:quat = (0.0000013267949, 0, 0, 1)
                    vector3f mujoco:geom:size = (0.45, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 3.14159)
                    point3f urdf:collision:origin:xyz = (3.303, -0.832, 0.6)
                    float3 urdf:geometry:box:size = (0.9, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.44999999999841567, 0.0000011941154070087285, 0, 0), (-6.633974483381825e-8, -0.02499999999991198, 0, 0), (0, 0, 0.6, 0), (3.303, -0.832, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_36" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (36.606228, 521.94147, 535.30365)
                float mujoco:body:inertial:mass = 114
                point3f mujoco:body:inertial:pos = (1.117, 1.66399, 0.6)
                quatf mujoco:body:inertial:quat = (-0.46763384, -0.040545616, -0.23409757, 0.8513947)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (1.117, 1.66399, 0.6)
                float3 physics:diagonalInertia = (36.606228, 521.94147, 535.30365)
                float physics:mass = 114
                quatf physics:principalAxes = (-0.46763384, -0.040545616, -0.23409757, 0.8513947)
                float urdf:link:inertial:inertia:ixx = 36.606228
                float urdf:link:inertial:inertia:iyy = 521.94147
                float urdf:link:inertial:inertia:izz = 535.30365
                float urdf:link:inertial:mass = 114
                float3 urdf:link:inertial:origin:rpy = (-0.38618252, 0.29212156, -2.1945603)
                point3f urdf:link:inertial:origin:xyz = (1.117, 1.66399, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_36_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.117, 1.66399, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (1.117, 1.66399, 0.6)
                    matrix4d xformOp:transform = ( (0.95, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (1.117, 1.66399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_36_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.117, 1.66399, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (0.95, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (1.117, 1.66399, 0.6)
                    float3 urdf:geometry:box:size = (1.9, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (0.95, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (1.117, 1.66399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_48" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (3199.313, 7730.9834, 10805.778)
                float mujoco:body:inertial:mass = 534.0006
                point3f mujoco:body:inertial:pos = (-3.58099, 0.669, 0.6)
                quatf mujoco:body:inertial:quat = (-0.036896873, 0.9963683, 0.0024616304, -0.07669905)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-3.58099, 0.669, 0.6)
                float3 physics:diagonalInertia = (3199.313, 7730.9834, 10805.778)
                float physics:mass = 534.0006
                quatf physics:principalAxes = (-0.036896873, 0.9963683, 0.0024616304, -0.07669905)
                float urdf:link:inertial:inertia:ixx = 3199.313
                float urdf:link:inertial:inertia:iyy = 7730.9834
                float urdf:link:inertial:inertia:izz = 10805.778
                float urdf:link:inertial:mass = 534.0006
                float3 urdf:link:inertial:origin:rpy = (-3.066743, 0.1532586, 0.010690801)
                point3f urdf:link:inertial:origin:xyz = (-3.58099, 0.669, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_48_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-3.58099, 0.669, 0.6)
                    quatf mujoco:geom:quat = (0.706628, 0, 0, 0.7075852)
                    vector3f mujoco:geom:size = (4.450005, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (8.90001, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.57215)
                    point3f urdf:visual:origin:xyz = (-3.58099, 0.669, 0.6)
                    matrix4d xformOp:transform = ( (-0.006023850691362065, 4.4500009228367405, 0, 0), (-0.024999977094614174, -0.0000338418197921242, 0, 0), (0, 0, 0.6, 0), (-3.58099, 0.669, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_48_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-3.58099, 0.669, 0.6)
                    quatf mujoco:geom:quat = (0.706628, 0, 0, 0.7075852)
                    vector3f mujoco:geom:size = (4.450005, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.57215)
                    point3f urdf:collision:origin:xyz = (-3.58099, 0.669, 0.6)
                    float3 urdf:geometry:box:size = (8.90001, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.006023850691362065, 4.4500009228367405, 0, 0), (-0.024999977094614174, -0.0000338418197921242, 0, 0), (0, 0, 0.6, 0), (-3.58099, 0.669, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_49" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (504.08966, 7867.447, 8305.499)
                float mujoco:body:inertial:mass = 279
                point3f mujoco:body:inertial:pos = (-1.28699, 5.09399, 0.6)
                quatf mujoco:body:inertial:quat = (0.79197097, 0.047539506, 0.03515656, -0.6076891)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-1.28699, 5.09399, 0.6)
                float3 physics:diagonalInertia = (504.08966, 7867.447, 8305.499)
                float physics:mass = 279
                quatf physics:principalAxes = (0.79197097, 0.047539506, 0.03515656, -0.6076891)
                float urdf:link:inertial:inertia:ixx = 504.08966
                float urdf:link:inertial:inertia:iyy = 7867.447
                float urdf:link:inertial:inertia:izz = 8305.499
                float urdf:link:inertial:mass = 279
                float3 urdf:link:inertial:origin:rpy = (0.032788888, 0.11370931, -1.3071121)
                point3f urdf:link:inertial:origin:xyz = (-1.28699, 5.09399, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_49_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-1.28699, 5.09399, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (2.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (4.65, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (-1.28699, 5.09399, 0.6)
                    matrix4d xformOp:transform = ( (2.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-1.28699, 5.09399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_49_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-1.28699, 5.09399, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (2.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (-1.28699, 5.09399, 0.6)
                    float3 urdf:geometry:box:size = (4.65, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (2.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-1.28699, 5.09399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_50" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (18.409515, 2479.285, 2497.6194)
                float mujoco:body:inertial:mass = 144
                point3f mujoco:body:inertial:pos = (1.01299, 3.91899, 0.6)
                quatf mujoco:body:inertial:quat = (0.473136, -0.3900817, 0.58729273, -0.52826685)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (1.01299, 3.91899, 0.6)
                float3 physics:diagonalInertia = (18.409515, 2479.285, 2497.6194)
                float physics:mass = 144
                quatf physics:principalAxes = (0.473136, -0.3900817, 0.58729273, -0.52826685)
                float urdf:link:inertial:inertia:ixx = 18.409515
                float urdf:link:inertial:inertia:iyy = 2479.285
                float urdf:link:inertial:inertia:izz = 2497.6194
                float urdf:link:inertial:mass = 144
                float3 urdf:link:inertial:origin:rpy = (-1.564888, 0.14410242, -1.8240489)
                point3f urdf:link:inertial:origin:xyz = (1.01299, 3.91899, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_50_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.01299, 3.91899, 0.6)
                    quatf mujoco:geom:quat = (-0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.2, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (2.4, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, -1.5708)
                    point3f urdf:visual:origin:xyz = (1.01299, 3.91899, 0.6)
                    matrix4d xformOp:transform = ( (-0.000004407846123832826, -1.1999999999919044, 0, 0), (0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (1.01299, 3.91899, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_50_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (1.01299, 3.91899, 0.6)
                    quatf mujoco:geom:quat = (-0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.2, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, -1.5708)
                    point3f urdf:collision:origin:xyz = (1.01299, 3.91899, 0.6)
                    float3 urdf:geometry:box:size = (2.4, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.000004407846123832826, -1.1999999999919044, 0, 0), (0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (1.01299, 3.91899, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_51" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (9.684675, 448.62888, 451.36328)
                float mujoco:body:inertial:mass = 54
                point3f mujoco:body:inertial:pos = (0.588, 2.74399, 0.6)
                quatf mujoco:body:inertial:quat = (0.5109943, -0.36836794, 0.5798571, -0.51667744)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (0.588, 2.74399, 0.6)
                float3 physics:diagonalInertia = (9.684675, 448.62888, 451.36328)
                float physics:mass = 54
                quatf physics:principalAxes = (0.5109943, -0.36836794, 0.5798571, -0.51667744)
                float urdf:link:inertial:inertia:ixx = 9.684675
                float urdf:link:inertial:inertia:iyy = 448.62888
                float urdf:link:inertial:inertia:izz = 451.36328
                float urdf:link:inertial:mass = 54
                float3 urdf:link:inertial:origin:rpy = (-1.513318, 0.21357249, -1.783576)
                point3f urdf:link:inertial:origin:xyz = (0.588, 2.74399, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_51_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0.588, 2.74399, 0.6)
                    quatf mujoco:geom:quat = (0.0000013267949, 0, 0, 1)
                    vector3f mujoco:geom:size = (0.45, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (0.9, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 3.14159)
                    point3f urdf:visual:origin:xyz = (0.588, 2.74399, 0.6)
                    matrix4d xformOp:transform = ( (-0.44999999999841567, 0.0000011941154070087285, 0, 0), (-6.633974483381825e-8, -0.02499999999991198, 0, 0), (0, 0, 0.6, 0), (0.588, 2.74399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_51_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (0.588, 2.74399, 0.6)
                    quatf mujoco:geom:quat = (0.0000013267949, 0, 0, 1)
                    vector3f mujoco:geom:size = (0.45, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 3.14159)
                    point3f urdf:collision:origin:xyz = (0.588, 2.74399, 0.6)
                    float3 urdf:geometry:box:size = (0.9, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.44999999999841567, 0.0000011941154070087285, 0, 0), (-6.633974483381825e-8, -0.02499999999991198, 0, 0), (0, 0, 0.6, 0), (0.588, 2.74399, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_53" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (45.702522, 2531.8616, 2554.344)
                float mujoco:body:inertial:mass = 204
                point3f mujoco:body:inertial:pos = (-0.765, 3.24799, 0.6)
                quatf mujoco:body:inertial:quat = (0.50490516, 0.37802303, 0.35284603, 0.69113606)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-0.765, 3.24799, 0.6)
                float3 physics:diagonalInertia = (45.702522, 2531.8616, 2554.344)
                float physics:mass = 204
                quatf physics:principalAxes = (0.50490516, 0.37802303, 0.35284603, 0.69113606)
                float urdf:link:inertial:inertia:ixx = 45.702522
                float urdf:link:inertial:inertia:iyy = 2531.8616
                float urdf:link:inertial:inertia:izz = 2554.344
                float urdf:link:inertial:mass = 204
                float3 urdf:link:inertial:origin:rpy = (1.079511, -0.16699827, 1.7795304)
                point3f urdf:link:inertial:origin:xyz = (-0.765, 3.24799, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_53_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.765, 3.24799, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (-0.765, 3.24799, 0.6)
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (-0.765, 3.24799, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_53_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-0.765, 3.24799, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (-0.765, 3.24799, 0.6)
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (-0.765, 3.24799, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_58" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (66.42959, 3373.2637, 3399.268)
                float mujoco:body:inertial:mass = 204
                point3f mujoco:body:inertial:pos = (2.042, 3.33899, 0.6)
                quatf mujoco:body:inertial:quat = (0.20206968, 0.8408446, 0.46167114, 0.19750437)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (2.042, 3.33899, 0.6)
                float3 physics:diagonalInertia = (66.42959, 3373.2637, 3399.268)
                float physics:mass = 204
                quatf physics:principalAxes = (0.20206968, 0.8408446, 0.46167114, 0.19750437)
                float urdf:link:inertial:inertia:ixx = 66.42959
                float urdf:link:inertial:inertia:iyy = 3373.2637
                float urdf:link:inertial:inertia:izz = 3399.268
                float urdf:link:inertial:mass = 204
                float3 urdf:link:inertial:origin:rpy = (2.5855796, -0.14608046, 1.0459962)
                point3f urdf:link:inertial:origin:xyz = (2.042, 3.33899, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_58_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.042, 3.33899, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (2.042, 3.33899, 0.6)
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (2.042, 3.33899, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_58_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.042, 3.33899, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (2.042, 3.33899, 0.6)
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (2.042, 3.33899, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_61" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (86.7298, 3167.242, 3216.8616)
                float mujoco:body:inertial:mass = 159
                point3f mujoco:body:inertial:pos = (-2.27499, -3.756, 0.6)
                quatf mujoco:body:inertial:quat = (-0.48653126, 0.031293426, 0.082926884, 0.86915547)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-2.27499, -3.756, 0.6)
                float3 physics:diagonalInertia = (86.7298, 3167.242, 3216.8616)
                float physics:mass = 159
                quatf physics:principalAxes = (-0.48653126, 0.031293426, 0.082926884, 0.86915547)
                float urdf:link:inertial:inertia:ixx = 86.7298
                float urdf:link:inertial:inertia:iyy = 3167.242
                float urdf:link:inertial:inertia:izz = 3216.8616
                float urdf:link:inertial:mass = 159
                float3 urdf:link:inertial:origin:rpy = (0.115007535, -0.13550505, -2.1287715)
                point3f urdf:link:inertial:origin:xyz = (-2.27499, -3.756, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_61_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-2.27499, -3.756, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (2.65, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 0)
                    point3f urdf:visual:origin:xyz = (-2.27499, -3.756, 0.6)
                    matrix4d xformOp:transform = ( (1.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-2.27499, -3.756, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_61_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-2.27499, -3.756, 0.6)
                    quatf mujoco:geom:quat = (1, 0, 0, 0)
                    vector3f mujoco:geom:size = (1.325, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 0)
                    point3f urdf:collision:origin:xyz = (-2.27499, -3.756, 0.6)
                    float3 urdf:geometry:box:size = (2.65, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (1.325, 0, 0, 0), (0, 0.025, 0, 0), (0, 0, 0.6, 0), (-2.27499, -3.756, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "walls__walls__Wall_63" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (194.31451, 1958.2252, 2105.7869)
                float mujoco:body:inertial:mass = 204
                point3f mujoco:body:inertial:pos = (2.878, 0.843, 0.6)
                quatf mujoco:body:inertial:quat = (0.98196334, -0.03027544, -0.10447939, 0.15464614)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (2.878, 0.843, 0.6)
                float3 physics:diagonalInertia = (194.31451, 1958.2252, 2105.7869)
                float physics:mass = 204
                quatf physics:principalAxes = (0.98196334, -0.03027544, -0.10447939, 0.15464614)
                float urdf:link:inertial:inertia:ixx = 194.31451
                float urdf:link:inertial:inertia:iyy = 1958.2252
                float urdf:link:inertial:inertia:izz = 2105.7869
                float urdf:link:inertial:mass = 204
                float3 urdf:link:inertial:origin:rpy = (-0.0937225, -0.19709958, 0.32168052)
                point3f urdf:link:inertial:origin:xyz = (2.878, 0.843, 0.6)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "walls__walls__Wall_63_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.878, 0.843, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    float3 urdf:visual:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:visual:origin:xyz = (2.878, 0.843, 0.6)
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (2.878, 0.843, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "walls__walls__Wall_63_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (2.878, 0.843, 0.6)
                    quatf mujoco:geom:quat = (0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (1.7, 0.025, 0.6)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, 1.5708)
                    point3f urdf:collision:origin:xyz = (2.878, 0.843, 0.6)
                    float3 urdf:geometry:box:size = (3.4, 0.05, 1.2)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.0000062444486754298366, 1.6999999999885314, 0, 0), (-0.024999999999831345, -9.183012757985055e-8, 0, 0), (0, 0, 0.6, 0), (2.878, 0.843, 0.6, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "wall" (
            prepend apiSchemas = ["UrdfLinkAPI", "MujocoBodyAPI"]
        )
        {
            point3f mujoco:body:pos = (-1.19, 1.86, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.19, 1.86, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Xform "wall__wall__Wall_0" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (110519.73, 682360.06, 786555.5)
                float mujoco:body:inertial:mass = 6187.5
                point3f mujoco:body:inertial:pos = (-9.98, 1.805, 1.25)
                quatf mujoco:body:inertial:quat = (0.98831296, -0.028961468, 0.062847205, -0.13582705)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-9.98, 1.805, 1.25)
                float3 physics:diagonalInertia = (110519.73, 682360.06, 786555.5)
                float physics:mass = 6187.5
                quatf physics:principalAxes = (0.98831296, -0.028961468, 0.062847205, -0.13582705)
                float urdf:link:inertial:inertia:ixx = 110519.73
                float urdf:link:inertial:inertia:iyy = 682360.06
                float urdf:link:inertial:inertia:izz = 786555.5
                float urdf:link:inertial:mass = 6187.5
                float3 urdf:link:inertial:origin:rpy = (-0.07489696, 0.11662208, -0.2775296)
                point3f urdf:link:inertial:origin:xyz = (-9.98, 1.805, 1.25)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "wall__wall__Wall_0_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-9.98, 1.805, 1.25)
                    quatf mujoco:geom:quat = (-0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (8.25, 0.075, 1.25)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (16.5, 0.15, 2.5)
                    float3 urdf:visual:origin:rpy = (0, -0, -1.5708)
                    point3f urdf:visual:origin:xyz = (-9.98, 1.805, 1.25)
                    matrix4d xformOp:transform = ( (-0.00003030394209951881, -8.249999999944345, 0, 0), (0.07499999999949404, -2.7549038272289825e-7, 0, 0), (0, 0, 1.25, 0), (-9.98, 1.805, 1.25, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "wall__wall__Wall_0_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-9.98, 1.805, 1.25)
                    quatf mujoco:geom:quat = (-0.70710546, 0, 0, 0.7071081)
                    vector3f mujoco:geom:size = (8.25, 0.075, 1.25)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, -0, -1.5708)
                    point3f urdf:collision:origin:xyz = (-9.98, 1.805, 1.25)
                    float3 urdf:geometry:box:size = (16.5, 0.15, 2.5)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (-0.00003030394209951881, -8.249999999944345, 0, 0), (0.07499999999949404, -2.7549038272289825e-7, 0, 0), (0, 0, 1.25, 0), (-9.98, 1.805, 1.25, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def Xform "wall__wall__Wall_2" (
                prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
            )
            {
                float3 mujoco:body:inertial:diaginertia = (169540.44, 683876.3, 846656.5)
                float mujoco:body:inertial:mass = 6591.9
                point3f mujoco:body:inertial:pos = (-1.26581, 9.97568, 1.25)
                quatf mujoco:body:inertial:quat = (0.7619777, 0.047978573, 0.040265895, -0.64456713)
                point3f mujoco:body:pos = (0, 0, 0)
                quatf mujoco:body:quat = (1, 0, 0, 0)
                point3f physics:centerOfMass = (-1.26581, 9.97568, 1.25)
                float3 physics:diagonalInertia = (169540.44, 683876.3, 846656.5)
                float physics:mass = 6591.9
                quatf physics:principalAxes = (0.7619777, 0.047978573, 0.040265895, -0.64456713)
                float urdf:link:inertial:inertia:ixx = 169540.44
                float urdf:link:inertial:inertia:iyy = 683876.3
                float urdf:link:inertial:inertia:izz = 846656.5
                float urdf:link:inertial:mass = 6591.9
                float3 urdf:link:inertial:origin:rpy = (0.021373535, 0.12352816, -1.4029118)
                point3f urdf:link:inertial:origin:xyz = (-1.26581, 9.97568, 1.25)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Cube "wall__wall__Wall_2_geom_visual_0" (
                    prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-1.26581, 9.97568, 1.25)
                    quatf mujoco:geom:quat = (0.99999994, 0, 0, -0.000245)
                    vector3f mujoco:geom:size = (8.7892, 0.075, 1.25)
                    uniform token mujoco:geom:type = "box"
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [1]
                    float3 urdf:geometry:box:size = (17.5784, 0.15, 2.5)
                    float3 urdf:visual:origin:rpy = (0, 0, -0.00049)
                    point3f urdf:visual:origin:xyz = (-1.26581, 9.97568, 1.25)
                    matrix4d xformOp:transform = ( (8.78919894485656, -0.004306707827659904, 0, 0), (0.00003674999852938753, 0.0749999909962502, 0, 0), (0, 0, 1.25, 0), (-1.26581, 9.97568, 1.25, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }

                def Cube "wall__wall__Wall_2_geom_collision_0" (
                    prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
                )
                {
                    float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                    point3f mujoco:geom:pos = (-1.26581, 9.97568, 1.25)
                    quatf mujoco:geom:quat = (0.99999994, 0, 0, -0.000245)
                    vector3f mujoco:geom:size = (8.7892, 0.075, 1.25)
                    uniform token mujoco:geom:type = "box"
                    bool physics:collisionEnabled = 1
                    color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                    float[] primvars:displayOpacity = [0]
                    float3 urdf:collision:origin:rpy = (0, 0, -0.00049)
                    point3f urdf:collision:origin:xyz = (-1.26581, 9.97568, 1.25)
                    float3 urdf:geometry:box:size = (17.5784, 0.15, 2.5)
                    token visibility = "invisible"
                    matrix4d xformOp:transform = ( (8.78919894485656, -0.004306707827659904, 0, 0), (0.00003674999852938753, 0.0749999909962502, 0, 0), (0, 0, 1.25, 0), (-1.26581, 9.97568, 1.25, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "cone1__ConstructionCone__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float mujoco:body:inertial:mass = 0.06330697
            point3f mujoco:body:inertial:pos = (-5.94, 2.97, 0.030226722)
            quatf mujoco:body:inertial:quat = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            point3f mujoco:body:pos = (-5.94, 2.97, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-5.94, 2.97, 0.030226722)
            float3 physics:diagonalInertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float physics:mass = 0.06330697
            quatf physics:principalAxes = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            float urdf:link:inertial:inertia:ixx = 0.000011387974
            float urdf:link:inertial:inertia:iyy = 0.00010928985
            float urdf:link:inertial:inertia:izz = 0.00010928985
            float urdf:link:inertial:mass = 0.06330697
            float3 urdf:link:inertial:origin:rpy = (-0.9958113, 1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (-5.94, 2.97, 0.030226722)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-5.94, 2.97, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cone1__ConstructionCone__link_geom_visual_0_construction_cone" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel material:binding = </isr_testbed/world/cone1__ConstructionCone__link/cone1__ConstructionCone__link_geom_visual_0_construction_cone/Materials/_1___Default>
                rel mujoco:geom:material = </mujoco/asset/materials/_1___Default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/construction_cone.obj@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                rel urdf:visual:material = </urdf/robot/materials/_1___Default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "_1___Default" (
                        prepend references = @./isr_testbed/materials/usd/_1___Default.usda@</_1___Default>
                    )
                    {
                    }
                }
            }

            def Mesh "cone1__ConstructionCone__link_geom_collision_0_construction_cone" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/construction_cone.stl@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cone2__ConstructionCone__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float mujoco:body:inertial:mass = 0.06330697
            point3f mujoco:body:inertial:pos = (-4.54, 2.97, 0.030226722)
            quatf mujoco:body:inertial:quat = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            point3f mujoco:body:pos = (-4.54, 2.97, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-4.54, 2.97, 0.030226722)
            float3 physics:diagonalInertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float physics:mass = 0.06330697
            quatf physics:principalAxes = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            float urdf:link:inertial:inertia:ixx = 0.000011387974
            float urdf:link:inertial:inertia:iyy = 0.00010928985
            float urdf:link:inertial:inertia:izz = 0.00010928985
            float urdf:link:inertial:mass = 0.06330697
            float3 urdf:link:inertial:origin:rpy = (-0.9958113, 1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (-4.54, 2.97, 0.030226722)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-4.54, 2.97, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cone2__ConstructionCone__link_geom_visual_0_construction_cone" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel material:binding = </isr_testbed/world/cone2__ConstructionCone__link/cone2__ConstructionCone__link_geom_visual_0_construction_cone/Materials/_1___Default>
                rel mujoco:geom:material = </mujoco/asset/materials/_1___Default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/construction_cone.obj@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                rel urdf:visual:material = </urdf/robot/materials/_1___Default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "_1___Default" (
                        prepend references = @./isr_testbed/materials/usd/_1___Default.usda@</_1___Default>
                    )
                    {
                    }
                }
            }

            def Mesh "cone2__ConstructionCone__link_geom_collision_0_construction_cone" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/construction_cone.stl@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cone3__ConstructionCone__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float mujoco:body:inertial:mass = 0.06330697
            point3f mujoco:body:inertial:pos = (3.03, 6.84, 0.030226722)
            quatf mujoco:body:inertial:quat = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            point3f mujoco:body:pos = (3.03, 6.84, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (3.03, 6.84, 0.030226722)
            float3 physics:diagonalInertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float physics:mass = 0.06330697
            quatf physics:principalAxes = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            float urdf:link:inertial:inertia:ixx = 0.000011387974
            float urdf:link:inertial:inertia:iyy = 0.00010928985
            float urdf:link:inertial:inertia:izz = 0.00010928985
            float urdf:link:inertial:mass = 0.06330697
            float3 urdf:link:inertial:origin:rpy = (-0.9958113, 1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (3.03, 6.84, 0.030226722)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3.03, 6.84, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cone3__ConstructionCone__link_geom_visual_0_construction_cone" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel material:binding = </isr_testbed/world/cone3__ConstructionCone__link/cone3__ConstructionCone__link_geom_visual_0_construction_cone/Materials/_1___Default>
                rel mujoco:geom:material = </mujoco/asset/materials/_1___Default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/construction_cone.obj@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                rel urdf:visual:material = </urdf/robot/materials/_1___Default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "_1___Default" (
                        prepend references = @./isr_testbed/materials/usd/_1___Default.usda@</_1___Default>
                    )
                    {
                    }
                }
            }

            def Mesh "cone3__ConstructionCone__link_geom_collision_0_construction_cone" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/construction_cone.stl@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cone4__ConstructionCone__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float mujoco:body:inertial:mass = 0.06330697
            point3f mujoco:body:inertial:pos = (3.03, 8.33, 0.030226722)
            quatf mujoco:body:inertial:quat = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            point3f mujoco:body:pos = (3.03, 8.33, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (3.03, 8.33, 0.030226722)
            float3 physics:diagonalInertia = (0.000011387974, 0.00010928985, 0.00010928985)
            float physics:mass = 0.06330697
            quatf physics:principalAxes = (0.6212532, -0.33770466, 0.62125325, 0.33770466)
            float urdf:link:inertial:inertia:ixx = 0.000011387974
            float urdf:link:inertial:inertia:iyy = 0.00010928985
            float urdf:link:inertial:inertia:izz = 0.00010928985
            float urdf:link:inertial:mass = 0.06330697
            float3 urdf:link:inertial:origin:rpy = (-0.9958113, 1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (3.03, 8.33, 0.030226722)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (3.03, 8.33, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cone4__ConstructionCone__link_geom_visual_0_construction_cone" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel material:binding = </isr_testbed/world/cone4__ConstructionCone__link/cone4__ConstructionCone__link_geom_visual_0_construction_cone/Materials/_1___Default>
                rel mujoco:geom:material = </mujoco/asset/materials/_1___Default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/construction_cone.obj@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                rel urdf:visual:material = </urdf/robot/materials/_1___Default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "_1___Default" (
                        prepend references = @./isr_testbed/materials/usd/_1___Default.usda@</_1___Default>
                    )
                    {
                    }
                }
            }

            def Mesh "cone4__ConstructionCone__link_geom_collision_0_construction_cone" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/construction_cone.usda@</construction_cone>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/construction_cone_10_0_10_0_10_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (10, 10, 10)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/construction_cone.stl@
                float3 urdf:geometry:mesh:scale = (10, 10, 10)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (10, 0, 0, 0), (0, 10, 0, 0), (0, 0, 10, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "table_outside__cafe_table__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (3.817102e-13, 6.642571e-13, 1.1946717e-12)
            float mujoco:body:inertial:mass = -0.000001717126
            point3f mujoco:body:inertial:pos = (-5.25, 3.77, -0.0000012081582)
            quatf mujoco:body:inertial:quat = (-0.7070841, 0.0006763578, 0.70712906, -0.00026837658)
            point3f mujoco:body:pos = (-5.25, 3.77, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-5.25, 3.77, -0.0000012081582)
            float3 physics:diagonalInertia = (3.817102e-13, 6.642571e-13, 1.1946717e-12)
            float physics:mass = -0.000001717126
            quatf physics:principalAxes = (-0.7070841, 0.0006763578, 0.70712906, -0.00026837658)
            float urdf:link:inertial:inertia:ixx = 3.817102e-13
            float urdf:link:inertial:inertia:iyy = 6.642571e-13
            float urdf:link:inertial:inertia:izz = 1.1946717e-12
            float urdf:link:inertial:mass = -0.000001717126
            float3 urdf:link:inertial:origin:rpy = (-1.6186199, -1.5694587, 1.618043)
            point3f urdf:link:inertial:origin:xyz = (-5.25, 3.77, -0.0000012081582)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-5.25, 3.77, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "table_outside__cafe_table__link_geom_visual_0_cafe_table" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/cafe_table.usda@</cafe_table>
            )
            {
                rel material:binding = </isr_testbed/world/table_outside__cafe_table__link/table_outside__cafe_table__link_geom_visual_0_cafe_table/Materials/Blue1>
                rel mujoco:geom:material = </mujoco/asset/materials/Blue1>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/cafe_table_1_0_1_0_0_6000000238418579>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 0.6)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/cafe_table.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 0.6)
                rel urdf:visual:material = </urdf/robot/materials/Blue1>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0.6, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Blue1" (
                        prepend references = @./isr_testbed/materials/usd/Blue1.usda@</Blue1>
                    )
                    {
                    }
                }
            }

            def Cube "table_outside__cafe_table__link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.02)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.28, 0.28, 0.02)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.02)
                float3 urdf:geometry:box:size = (0.56, 0.56, 0.04)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.28, 0, 0, 0), (0, 0.28, 0, 0), (0, 0, 0.02, 0), (0, 0, 0.02, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_outside__cafe_table__link_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.4565, 0.4565, 0.0175)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.45)
                float3 urdf:geometry:box:size = (0.913, 0.913, 0.035)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.4565, 0, 0, 0), (0, 0.4565, 0, 0), (0, 0, 0.0175, 0), (0, 0, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_outside__cafe_table__link_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.37)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.021, 0.021, 0.075)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.37)
                float3 urdf:geometry:box:size = (0.042, 0.042, 0.15)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.021, 0, 0, 0), (0, 0.021, 0, 0), (0, 0, 0.075, 0), (0, 0, 0.37, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "hydrant1__fire_hydrant__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.37827155, 8.444499, 8.44997)
            float mujoco:body:inertial:mass = 36.599594
            point3f mujoco:body:inertial:pos = (1.01, 9.439549, 0.40680927)
            quatf mujoco:body:inertial:quat = (0.49307165, 0.5068337, -0.50682867, 0.49307674)
            point3f mujoco:body:pos = (1.01, 9.45, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (1.01, 9.439549, 0.40680927)
            float3 physics:diagonalInertia = (0.37827155, 8.444499, 8.44997)
            float physics:mass = 36.599594
            quatf physics:principalAxes = (0.49307165, 0.5068337, -0.50682867, 0.49307674)
            float urdf:link:inertial:inertia:ixx = 0.37827155
            float urdf:link:inertial:inertia:iyy = 8.444499
            float urdf:link:inertial:inertia:izz = 8.44997
            float urdf:link:inertial:mass = 36.599594
            float3 urdf:link:inertial:origin:rpy = (-3.1415844, -1.5432816, -1.5707946)
            point3f urdf:link:inertial:origin:xyz = (1.01, 9.439549, 0.40680927)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.01, 9.45, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "hydrant1__fire_hydrant__link_geom_visual_0_fire_hydrant" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/fire_hydrant.usda@</fire_hydrant>
            )
            {
                rel material:binding = </isr_testbed/world/hydrant1__fire_hydrant__link/hydrant1__fire_hydrant__link_geom_visual_0_fire_hydrant/Materials/Firehydrant>
                rel mujoco:geom:material = </mujoco/asset/materials/Firehydrant>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/fire_hydrant>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/fire_hydrant.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Firehydrant>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Firehydrant" (
                        prepend references = @./isr_testbed/materials/usd/Firehydrant.usda@</Firehydrant>
                    )
                    {
                    }
                }
            }

            def Mesh "hydrant1__fire_hydrant__link_geom_collision_0_fire_hydrant" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/fire_hydrant.usda@</fire_hydrant>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/fire_hydrant>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/fire_hydrant.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "hydrant2__fire_hydrant__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.37827155, 8.444499, 8.44997)
            float mujoco:body:inertial:mass = 36.599594
            point3f mujoco:body:inertial:pos = (-4, 9.439549, 0.40680927)
            quatf mujoco:body:inertial:quat = (0.49307165, 0.5068337, -0.50682867, 0.49307674)
            point3f mujoco:body:pos = (-4, 9.45, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-4, 9.439549, 0.40680927)
            float3 physics:diagonalInertia = (0.37827155, 8.444499, 8.44997)
            float physics:mass = 36.599594
            quatf physics:principalAxes = (0.49307165, 0.5068337, -0.50682867, 0.49307674)
            float urdf:link:inertial:inertia:ixx = 0.37827155
            float urdf:link:inertial:inertia:iyy = 8.444499
            float urdf:link:inertial:inertia:izz = 8.44997
            float urdf:link:inertial:mass = 36.599594
            float3 urdf:link:inertial:origin:rpy = (-3.1415844, -1.5432816, -1.5707946)
            point3f urdf:link:inertial:origin:xyz = (-4, 9.439549, 0.40680927)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-4, 9.45, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "hydrant2__fire_hydrant__link_geom_visual_0_fire_hydrant" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/fire_hydrant.usda@</fire_hydrant>
            )
            {
                rel material:binding = </isr_testbed/world/hydrant2__fire_hydrant__link/hydrant2__fire_hydrant__link_geom_visual_0_fire_hydrant/Materials/Firehydrant>
                rel mujoco:geom:material = </mujoco/asset/materials/Firehydrant>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/fire_hydrant>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/fire_hydrant.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Firehydrant>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Firehydrant" (
                        prepend references = @./isr_testbed/materials/usd/Firehydrant.usda@</Firehydrant>
                    )
                    {
                    }
                }
            }

            def Mesh "hydrant2__fire_hydrant__link_geom_collision_0_fire_hydrant" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/fire_hydrant.usda@</fire_hydrant>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/fire_hydrant>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/fire_hydrant.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tree1__pine_tree__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (36777.797, 349239.6, 349270.7)
            float mujoco:body:inertial:mass = 91232.58
            point3f mujoco:body:inertial:pos = (-6.001002, 9.450437, 1.7184935)
            quatf mujoco:body:inertial:quat = (-0.24969545, 0.6612636, 0.24879922, 0.66217947)
            point3f mujoco:body:pos = (-6, 9.45, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-6.001002, 9.450437, 1.7184935)
            float3 physics:diagonalInertia = (36777.797, 349239.6, 349270.7)
            float physics:mass = 91232.58
            quatf physics:principalAxes = (-0.24969545, 0.6612636, 0.24879922, 0.66217947)
            float urdf:link:inertial:inertia:ixx = 36777.797
            float urdf:link:inertial:inertia:iyy = 349239.6
            float urdf:link:inertial:inertia:izz = 349270.7
            float urdf:link:inertial:mass = 91232.58
            float3 urdf:link:inertial:origin:rpy = (-0.41432276, -1.5689842, -2.0068107)
            point3f urdf:link:inertial:origin:xyz = (-6.001002, 9.450437, 1.7184935)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-6, 9.45, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tree1__pine_tree__link_geom_visual_0_pine_tree" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel material:binding = </isr_testbed/world/tree1__pine_tree__link/tree1__pine_tree__link_geom_visual_0_pine_tree/Materials/Branch_2>
                rel mujoco:geom:material = </mujoco/asset/materials/Branch_2>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/pine_tree.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Branch_2>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Branch_2" (
                        prepend references = @./isr_testbed/materials/usd/Branch_2.usda@</Branch_2>
                    )
                    {
                    }
                }
            }

            def Mesh "tree1__pine_tree__link_geom_visual_1_pine_tree" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel material:binding = </isr_testbed/world/tree1__pine_tree__link/tree1__pine_tree__link_geom_visual_1_pine_tree/Materials/Branch_2>
                rel mujoco:geom:material = </mujoco/asset/materials/Branch_2>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/pine_tree.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Branch_2>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Branch_2" (
                        prepend references = @./isr_testbed/materials/usd/Branch_2.usda@</Branch_2>
                    )
                    {
                    }
                }
            }

            def Mesh "tree1__pine_tree__link_geom_collision_0_pine_tree" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/pine_tree.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tree2__pine_tree__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (36777.797, 349239.6, 349270.7)
            float mujoco:body:inertial:mass = 91232.58
            point3f mujoco:body:inertial:pos = (-9.111002, 6.2504363, 1.7184935)
            quatf mujoco:body:inertial:quat = (-0.24969545, 0.6612636, 0.24879922, 0.66217947)
            point3f mujoco:body:pos = (-9.11, 6.25, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-9.111002, 6.2504363, 1.7184935)
            float3 physics:diagonalInertia = (36777.797, 349239.6, 349270.7)
            float physics:mass = 91232.58
            quatf physics:principalAxes = (-0.24969545, 0.6612636, 0.24879922, 0.66217947)
            float urdf:link:inertial:inertia:ixx = 36777.797
            float urdf:link:inertial:inertia:iyy = 349239.6
            float urdf:link:inertial:inertia:izz = 349270.7
            float urdf:link:inertial:mass = 91232.58
            float3 urdf:link:inertial:origin:rpy = (-0.41432276, -1.5689842, -2.0068107)
            point3f urdf:link:inertial:origin:xyz = (-9.111002, 6.2504363, 1.7184935)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-9.11, 6.25, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tree2__pine_tree__link_geom_visual_0_pine_tree" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel material:binding = </isr_testbed/world/tree2__pine_tree__link/tree2__pine_tree__link_geom_visual_0_pine_tree/Materials/Branch_2>
                rel mujoco:geom:material = </mujoco/asset/materials/Branch_2>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/pine_tree.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Branch_2>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Branch_2" (
                        prepend references = @./isr_testbed/materials/usd/Branch_2.usda@</Branch_2>
                    )
                    {
                    }
                }
            }

            def Mesh "tree2__pine_tree__link_geom_visual_1_pine_tree" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel material:binding = </isr_testbed/world/tree2__pine_tree__link/tree2__pine_tree__link_geom_visual_1_pine_tree/Materials/Branch_2>
                rel mujoco:geom:material = </mujoco/asset/materials/Branch_2>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/pine_tree.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Branch_2>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Branch_2" (
                        prepend references = @./isr_testbed/materials/usd/Branch_2.usda@</Branch_2>
                    )
                    {
                    }
                }
            }

            def Mesh "tree2__pine_tree__link_geom_collision_0_pine_tree" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pine_tree.usda@</pine_tree>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pine_tree>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/pine_tree.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "human__person_standing__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (2.121081, 205.8092, 207.07864)
            float mujoco:body:inertial:mass = 144.47679
            point3f mujoco:body:inertial:pos = (-2.0399904, 2.3401802, 1.1127172)
            quatf mujoco:body:inertial:quat = (0.4797158, 0.5194787, -0.51020604, 0.4895962)
            point3f mujoco:body:pos = (-2.04, 2.41, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.0399904, 2.3401802, 1.1127172)
            float3 physics:diagonalInertia = (2.121081, 205.8092, 207.07864)
            float physics:mass = 144.47679
            quatf physics:principalAxes = (0.4797158, 0.5194787, -0.51020604, 0.4895962)
            float urdf:link:inertial:inertia:ixx = 2.121081
            float urdf:link:inertial:inertia:iyy = 205.8092
            float urdf:link:inertial:inertia:izz = 207.07864
            float urdf:link:inertial:mass = 144.47679
            float3 urdf:link:inertial:origin:rpy = (-3.1219451, -1.5104114, -1.5712818)
            point3f urdf:link:inertial:origin:xyz = (-2.0399904, 2.3401802, 1.1127172)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.04, 2.41, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "human__person_standing__link_geom_visual_0_standing" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/standing.usda@</standing>
            )
            {
                rel material:binding = </isr_testbed/world/human__person_standing__link/human__person_standing__link_geom_visual_0_standing/Materials/v2_Skin>
                rel mujoco:geom:material = </mujoco/asset/materials/v2_Skin>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/standing_1_0_0_9592107534408569_1_0391894578933716>
                point3f mujoco:geom:pos = (0, 0, 0.02)
                quatf mujoco:geom:quat = (0.9998, 0.019998666, 0, 0)
                vector3f mujoco:geom:size = (1, 0.95921075, 1.0391895)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/standing.obj@
                float3 urdf:geometry:mesh:scale = (1, 0.95921075, 1.0391895)
                rel urdf:visual:material = </urdf/robot/materials/v2_Skin>
                float3 urdf:visual:origin:rpy = (0.04, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0.02)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.9584435061667232, 0.03835820013589604, 0), (0, -0.04155649383327666, 1.038358200135896, 0), (0, 0, 0.02, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "v2_Skin" (
                        prepend references = @./isr_testbed/materials/usd/v2_Skin.usda@</v2_Skin>
                    )
                    {
                    }
                }
            }

            def Mesh "human__person_standing__link_geom_collision_0_standing" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/standing.usda@</standing>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/standing_1_0_0_9592107534408569_1_0391894578933716>
                point3f mujoco:geom:pos = (0, 0, 0.02)
                quatf mujoco:geom:quat = (0.9998, 0.019998666, 0, 0)
                vector3f mujoco:geom:size = (1, 0.95921075, 1.0391895)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0.04, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.02)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/standing.stl@
                float3 urdf:geometry:mesh:scale = (1, 0.95921075, 1.0391895)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.9584435061667232, 0.03835820013589604, 0), (0, -0.04155649383327666, 1.038358200135896, 0), (0, 0, 0.02, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "human__person_standing__link_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.1, 0.01)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.175, 0.01)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.1, 0.01)
                float3 urdf:geometry:box:size = (0.5, 0.35, 0.02)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.175, 0, 0), (0, 0, 0.01, 0), (0, -0.1, 0.01, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "wardrobe__wardrobe__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (41.82189, 317.6146, 341.56592)
            float mujoco:body:inertial:mass = 283.63464
            point3f mujoco:body:inertial:pos = (-2.8191397, 2.6398575, 0.8633741)
            quatf mujoco:body:inertial:quat = (-0.65738213, 0.00022345311, 0.75355726, 0.0003644155)
            point3f mujoco:body:pos = (-2.65, 2.44, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.8191397, 2.6398575, 0.8633741)
            float3 physics:diagonalInertia = (41.82189, 317.6146, 341.56592)
            float physics:mass = 283.63464
            quatf physics:principalAxes = (-0.65738213, 0.00022345311, 0.75355726, 0.0003644155)
            float urdf:link:inertial:inertia:ixx = 41.82189
            float urdf:link:inertial:inertia:iyy = 317.6146
            float urdf:link:inertial:inertia:izz = 341.56592
            float urdf:link:inertial:mass = 283.63464
            float3 urdf:link:inertial:origin:rpy = (3.1397104, -1.4346789, -3.1405437)
            point3f urdf:link:inertial:origin:xyz = (-2.8191397, 2.6398575, 0.8633741)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.65, 2.44, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "wardrobe__wardrobe__base_link_geom_visual_0_wardrobe" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/wardrobe.usda@</wardrobe>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/wardrobe_0_9992033839225769_1_0007959604263306_1_0>
                point3f mujoco:geom:pos = (0, 0.2, 0)
                quatf mujoco:geom:quat = (0.7073883, 0, 0, 0.7068252)
                vector3f mujoco:geom:size = (0.9992034, 1.000796, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/SM_wardrobe__wardrobe__base_link_visual_0.obj@
                float3 urdf:geometry:mesh:scale = (0.9992034, 1.000796, 1)
                float3 urdf:visual:origin:rpy = (0, -0, 1.57)
                point3f urdf:visual:origin:xyz = (0, 0.2, 0)
                matrix4d xformOp:transform = ( (0.0007956923220128548, 0.9992030394055268, 0, 0), (-1.0007956923220134, 0.0007969605944733086, 0, 0), (0, 0, 1, 0), (0, 0.2, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "wardrobe__wardrobe__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0.2, 1)
                quatf mujoco:geom:quat = (0.7073883, 0, 0, 0.7068252)
                vector3f mujoco:geom:size = (0.5, 0.36, 1)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 1.57)
                point3f urdf:collision:origin:xyz = (0, 0.2, 1)
                float3 urdf:geometry:box:size = (1, 0.72, 2)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.0003981633553664654, 0.49999984146591736, 0, 0), (-0.35999988585546056, 0.00028667761586385513, 0, 0), (0, 0, 1, 0), (0, 0.2, 1, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "pizza_box__pizza_box__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (1.4016859e-9, 2.8556635e-9, 4.1872856e-9)
            float mujoco:body:inertial:mass = 1.5522043e-7
            point3f mujoco:body:inertial:pos = (2.014456, -0.21632512, 0.8)
            quatf mujoco:body:inertial:quat = (-0.018119413, 0.71649563, 0.6900212, -0.100878194)
            point3f mujoco:body:pos = (2, -0.15, 0.8)
            quatf mujoco:body:quat = (0.87758255, 0, 0, 0.47942555)
            point3f physics:centerOfMass = (2.014456, -0.21632512, 0.8)
            float3 physics:diagonalInertia = (1.4016859e-9, 2.8556635e-9, 4.1872856e-9)
            float physics:mass = 1.5522043e-7
            quatf physics:principalAxes = (-0.018119413, 0.71649563, 0.6900212, -0.100878194)
            float urdf:link:inertial:inertia:ixx = 1.4016859e-9
            float urdf:link:inertial:inertia:iyy = 2.8556635e-9
            float urdf:link:inertial:inertia:izz = 4.1872856e-9
            float urdf:link:inertial:mass = 1.5522043e-7
            float3 urdf:link:inertial:origin:rpy = (-2.974441, 0.11983865, 1.5432063)
            point3f urdf:link:inertial:origin:xyz = (2.014456, -0.21632512, 0.8)
            matrix4d xformOp:transform = ( (0.5403023058681398, 0.8414709848078965, 0, 0), (-0.8414709848078965, 0.5403023058681398, 0, 0), (0, 0, 1, 0), (2, -0.15, 0.8, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "pizza_box__pizza_box__base_link_geom_visual_0_pizza_box" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/pizza_box.usda@</pizza_box>
            )
            {
                rel material:binding = </isr_testbed/world/pizza_box__pizza_box__base_link/pizza_box__pizza_box__base_link_geom_visual_0_pizza_box/Materials/pizza_box_white>
                rel mujoco:geom:material = </mujoco/asset/materials/pizza_box_white>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/pizza_box>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/pizza_box.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/pizza_box_white>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "pizza_box_white" (
                        prepend references = @./isr_testbed/materials/usd/pizza_box_white.usda@</pizza_box_white>
                    )
                    {
                    }
                }
            }

            def Cube "pizza_box__pizza_box__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.0175)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.205, 0.3, 0.0175)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.0175)
                float3 urdf:geometry:box:size = (0.41, 0.6, 0.035)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.205, 0, 0, 0), (0, 0.3, 0, 0), (0, 0, 0.0175, 0), (0, 0, 0.0175, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "basmati_rice__basmati_rice__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (2.9417187e-19, 1.6394981e-18, 1.901394e-18)
            float mujoco:body:inertial:mass = -1.9402554e-8
            point3f mujoco:body:inertial:pos = (-2.85, 0.5, 0.8)
            quatf mujoco:body:inertial:quat = (-1.3416797e-11, 0.70710677, -1.3416797e-11, 0.70710677)
            point3f mujoco:body:pos = (-2.85, 0.5, 0.8)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.85, 0.5, 0.8)
            float3 physics:diagonalInertia = (2.9417187e-19, 1.6394981e-18, 1.901394e-18)
            float physics:mass = -1.9402554e-8
            quatf physics:principalAxes = (-1.3416797e-11, 0.70710677, -1.3416797e-11, 0.70710677)
            float urdf:link:inertial:inertia:ixx = 2.9417187e-19
            float urdf:link:inertial:inertia:iyy = 1.6394981e-18
            float urdf:link:inertial:inertia:izz = 1.901394e-18
            float urdf:link:inertial:mass = -1.9402554e-8
            float3 urdf:link:inertial:origin:rpy = (3.1415927, -1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (-2.85, 0.5, 0.8)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.85, 0.5, 0.8, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "basmati_rice__basmati_rice__base_link_geom_visual_0_basmati_rice" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/basmati_rice.usda@</basmati_rice>
            )
            {
                rel material:binding = </isr_testbed/world/basmati_rice__basmati_rice__base_link/basmati_rice__basmati_rice__base_link_geom_visual_0_basmati_rice/Materials/basmati_rice_top>
                rel mujoco:geom:material = </mujoco/asset/materials/basmati_rice_top>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/basmati_rice_1_5_1_0_1_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1.5, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/basmati_rice.obj@
                float3 urdf:geometry:mesh:scale = (1.5, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/basmati_rice_top>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1.5, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "basmati_rice_top" (
                        prepend references = @./isr_testbed/materials/usd/basmati_rice_top.usda@</basmati_rice_top>
                    )
                    {
                    }
                }
            }

            def Cube "basmati_rice__basmati_rice__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.0205, 0.061, 0.085)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                float3 urdf:geometry:box:size = (0.041, 0.122, 0.17)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.0205, 0, 0, 0), (0, 0.061, 0, 0), (0, 0, 0.085, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tea_box__tea_box__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (3.4504673e-20, 3.7512532e-19, 3.7739947e-19)
            float mujoco:body:inertial:mass = -9.701277e-9
            point3f mujoco:body:inertial:pos = (-2.85, 0.9, 0.85)
            quatf mujoco:body:inertial:quat = (-0.056348935, -0.704858, 0.704858, -0.056348935)
            point3f mujoco:body:pos = (-2.85, 0.9, 0.85)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.85, 0.9, 0.85)
            float3 physics:diagonalInertia = (3.4504673e-20, 3.7512532e-19, 3.7739947e-19)
            float physics:mass = -9.701277e-9
            quatf physics:principalAxes = (-0.056348935, -0.704858, 0.704858, -0.056348935)
            float urdf:link:inertial:inertia:ixx = 3.4504673e-20
            float urdf:link:inertial:inertia:iyy = 3.7512532e-19
            float urdf:link:inertial:inertia:izz = 3.7739947e-19
            float urdf:link:inertial:mass = -9.701277e-9
            float3 urdf:link:inertial:origin:rpy = (3.1415927, -0.15954803, -1.5707964)
            point3f urdf:link:inertial:origin:xyz = (-2.85, 0.9, 0.85)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.85, 0.9, 0.85, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tea_box__tea_box__base_link_geom_visual_0_tea_box" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tea_box.usda@</tea_box>
            )
            {
                rel material:binding = </isr_testbed/world/tea_box__tea_box__base_link/tea_box__tea_box__base_link_geom_visual_0_tea_box/Materials/material>
                rel mujoco:geom:material = </mujoco/asset/materials/material>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tea_box>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tea_box.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material" (
                        prepend references = @./isr_testbed/materials/usd/material.usda@</material>
                    )
                    {
                    }
                }
            }

            def Cube "tea_box__tea_box__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.0315, 0.079, 0.0365)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                float3 urdf:geometry:box:size = (0.063, 0.158, 0.073)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.0315, 0, 0, 0), (0, 0.079, 0, 0), (0, 0, 0.0365, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "beer__beer__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.00028286115, 0.0006956075, 0.0006956075)
            float mujoco:body:inertial:mass = 0.4618141
            point3f mujoco:body:inertial:pos = (-2.73, -2.64, 0.6)
            quatf mujoco:body:inertial:quat = (0.70710677, 0, 0.70710677, 0)
            point3f mujoco:body:pos = (-2.73, -2.64, 0.6)
            quatf mujoco:body:quat = (0.87758255, 0, 0, 0.47942555)
            point3f physics:centerOfMass = (-2.73, -2.64, 0.6)
            float3 physics:diagonalInertia = (0.00028286115, 0.0006956075, 0.0006956075)
            float physics:mass = 0.4618141
            quatf physics:principalAxes = (0.70710677, 0, 0.70710677, 0)
            float urdf:link:inertial:inertia:ixx = 0.00028286115
            float urdf:link:inertial:inertia:iyy = 0.0006956075
            float urdf:link:inertial:inertia:izz = 0.0006956075
            float urdf:link:inertial:mass = 0.4618141
            float3 urdf:link:inertial:origin:rpy = (-0, 1.5707963, 0)
            point3f urdf:link:inertial:origin:xyz = (-2.73, -2.64, 0.6)
            matrix4d xformOp:transform = ( (0.5403023058681398, 0.8414709848078965, 0, 0), (-0.8414709848078965, 0.5403023058681398, 0, 0), (0, 0, 1, 0), (-2.73, -2.64, 0.6, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Cylinder "beer__beer__link_geom_visual_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.035, -0.035, -0.06), (0.035, 0.035, 0.06)]
                double height = 0.12
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.035, 0.06, 0)
                uniform token mujoco:geom:type = "cylinder"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                double radius = 0.035
                float urdf:geometry:cylinder:length = 0.12
                float urdf:geometry:cylinder:radius = 0.035
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "beer__beer__link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.035, -0.035, -0.06), (0.035, 0.035, 0.06)]
                double height = 0.12
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.035, 0.06, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.035
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                float urdf:geometry:cylinder:length = 0.12
                float urdf:geometry:cylinder:radius = 0.035
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cup1__plastic_cup__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.00013955578, 0.00030715065, 0.00039354927)
            float mujoco:body:inertial:mass = 0.059198037
            point3f mujoco:body:inertial:pos = (-2.8612707, -2.3927634, 0.52285326)
            quatf mujoco:body:inertial:quat = (-0.7069846, 0.013144776, 0.7069846, -0.013144755)
            point3f mujoco:body:pos = (-2.85, -2.4, 0.45)
            quatf mujoco:body:quat = (0.87758255, 0, 0, 0.47942555)
            point3f physics:centerOfMass = (-2.8612707, -2.3927634, 0.52285326)
            float3 physics:diagonalInertia = (0.00013955578, 0.00030715065, 0.00039354927)
            float physics:mass = 0.059198037
            quatf physics:principalAxes = (-0.7069846, 0.013144776, 0.7069846, -0.013144755)
            float urdf:link:inertial:inertia:ixx = 0.00013955578
            float urdf:link:inertial:inertia:iyy = 0.00030715065
            float urdf:link:inertial:inertia:izz = 0.00039354927
            float urdf:link:inertial:mass = 0.059198037
            float3 urdf:link:inertial:origin:rpy = (-1.5707964, -1.5336152, 1.5707964)
            point3f urdf:link:inertial:origin:xyz = (-2.8612707, -2.3927634, 0.52285326)
            matrix4d xformOp:transform = ( (0.5403023058681398, 0.8414709848078965, 0, 0), (-0.8414709848078965, 0.5403023058681398, 0, 0), (0, 0, 1, 0), (-2.85, -2.4, 0.45, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cup1__plastic_cup__link_geom_visual_0_plastic_cup" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plastic_cup.usda@</plastic_cup>
            )
            {
                rel material:binding = </isr_testbed/world/cup1__plastic_cup__link/cup1__plastic_cup__link_geom_visual_0_plastic_cup/Materials/default>
                rel mujoco:geom:material = </mujoco/asset/materials/default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plastic_cup>
                point3f mujoco:geom:pos = (0, 0, 0.065)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/plastic_cup.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0.065)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.065, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "default" (
                        prepend references = @./isr_testbed/materials/usd/default.usda@</default>
                    )
                    {
                    }
                }
            }

            def Mesh "cup1__plastic_cup__link_geom_collision_0_plastic_cup" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plastic_cup.usda@</plastic_cup>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plastic_cup>
                point3f mujoco:geom:pos = (0, 0, 0.065)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.065)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/plastic_cup.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.065, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cup2__plastic_cup__link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.00013955578, 0.00030715065, 0.00039354927)
            float mujoco:body:inertial:mass = 0.059198037
            point3f mujoco:body:inertial:pos = (1.8187294, -0.47276327, 0.8728533)
            quatf mujoco:body:inertial:quat = (-0.7069846, 0.013144776, 0.7069846, -0.013144755)
            point3f mujoco:body:pos = (1.83, -0.48, 0.8)
            quatf mujoco:body:quat = (0.87758255, 0, 0, 0.47942555)
            point3f physics:centerOfMass = (1.8187294, -0.47276327, 0.8728533)
            float3 physics:diagonalInertia = (0.00013955578, 0.00030715065, 0.00039354927)
            float physics:mass = 0.059198037
            quatf physics:principalAxes = (-0.7069846, 0.013144776, 0.7069846, -0.013144755)
            float urdf:link:inertial:inertia:ixx = 0.00013955578
            float urdf:link:inertial:inertia:iyy = 0.00030715065
            float urdf:link:inertial:inertia:izz = 0.00039354927
            float urdf:link:inertial:mass = 0.059198037
            float3 urdf:link:inertial:origin:rpy = (-1.5707964, -1.5336152, 1.5707964)
            point3f urdf:link:inertial:origin:xyz = (1.8187294, -0.47276327, 0.8728533)
            matrix4d xformOp:transform = ( (0.5403023058681398, 0.8414709848078965, 0, 0), (-0.8414709848078965, 0.5403023058681398, 0, 0), (0, 0, 1, 0), (1.83, -0.48, 0.8, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cup2__plastic_cup__link_geom_visual_0_plastic_cup" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plastic_cup.usda@</plastic_cup>
            )
            {
                rel material:binding = </isr_testbed/world/cup2__plastic_cup__link/cup2__plastic_cup__link_geom_visual_0_plastic_cup/Materials/default>
                rel mujoco:geom:material = </mujoco/asset/materials/default>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plastic_cup>
                point3f mujoco:geom:pos = (0, 0, 0.065)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/plastic_cup.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/default>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0.065)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.065, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "default" (
                        prepend references = @./isr_testbed/materials/usd/default.usda@</default>
                    )
                    {
                    }
                }
            }

            def Mesh "cup2__plastic_cup__link_geom_collision_0_plastic_cup" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plastic_cup.usda@</plastic_cup>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plastic_cup>
                point3f mujoco:geom:pos = (0, 0, 0.065)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.065)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/plastic_cup.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.065, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "shelf__shelf__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (8739.149, 9658.824, 17974.592)
            float mujoco:body:inertial:mass = 936.5528
            point3f mujoco:body:inertial:pos = (-2.812269, 0.99420923, 2.8869107)
            quatf mujoco:body:inertial:quat = (0.7094554, -0.7046996, 0.005960119, 0.006006079)
            point3f mujoco:body:pos = (-2.85, 1, 0)
            quatf mujoco:body:quat = (0.71091354, 0, 0, 0.70327944)
            point3f physics:centerOfMass = (-2.812269, 0.99420923, 2.8869107)
            float3 physics:diagonalInertia = (8739.149, 9658.824, 17974.592)
            float physics:mass = 936.5528
            quatf physics:principalAxes = (0.7094554, -0.7046996, 0.005960119, 0.006006079)
            float urdf:link:inertial:inertia:ixx = 8739.149
            float urdf:link:inertial:inertia:iyy = 9658.824
            float urdf:link:inertial:inertia:izz = 17974.592
            float urdf:link:inertial:mass = 936.5528
            float3 urdf:link:inertial:origin:rpy = (-1.5640694, 0.016922647, 0.00012192057)
            point3f urdf:link:inertial:origin:xyz = (-2.812269, 0.99420923, 2.8869107)
            matrix4d xformOp:transform = ( (0.010796117058267551, 0.9999417202299662, 0, 0), (-0.9999417202299662, 0.010796117058267551, 0, 0), (0, 0, 1, 0), (-2.85, 1, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "shelf__shelf__base_link_geom_visual_0_shelf" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/shelf.usda@</shelf>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/shelf_0_15000000596046448_0_20000000298023224_0_20000000298023224>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.15, 0.2, 0.2)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/shelf.obj@
                float3 urdf:geometry:mesh:scale = (0.15, 0.2, 0.2)
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.2, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Mesh "shelf__shelf__base_link_geom_collision_0_shelf" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/shelf.usda@</shelf>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/shelf_0_15000000596046448_0_20000000298023224_0_20000000298023224>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.15, 0.2, 0.2)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/shelf.stl@
                float3 urdf:geometry:mesh:scale = (0.15, 0.2, 0.2)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, 0.2, 0, 0), (0, 0, 0.2, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "lamp_ikea_arstid__lamp_ikea_arstid__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-3.100901e-17, 9.925962e-16, 1.1555551e-15)
            float mujoco:body:inertial:mass = -1.0737881e-7
            point3f mujoco:body:inertial:pos = (-2.85, -2, 1.0417175e-8)
            quatf mujoco:body:inertial:quat = (0.5073195, 0.3055498, 0.7538832, -0.28447562)
            point3f mujoco:body:pos = (-2.85, -2, 0)
            quatf mujoco:body:quat = (0.71091354, 0, 0, 0.70327944)
            point3f physics:centerOfMass = (-2.85, -2, 1.0417175e-8)
            float3 physics:diagonalInertia = (-3.100901e-17, 9.925962e-16, 1.1555551e-15)
            float physics:mass = -1.0737881e-7
            quatf physics:principalAxes = (0.5073195, 0.3055498, 0.7538832, -0.28447562)
            float urdf:link:inertial:inertia:ixx = -3.100901e-17
            float urdf:link:inertial:inertia:iyy = 9.925962e-16
            float urdf:link:inertial:inertia:izz = 1.1555551e-15
            float urdf:link:inertial:mass = -1.0737881e-7
            float3 urdf:link:inertial:origin:rpy = (-2.7892768, 1.2190202, 2.6187482)
            point3f urdf:link:inertial:origin:xyz = (-2.85, -2, 1.0417175e-8)
            matrix4d xformOp:transform = ( (0.010796117058267551, 0.9999417202299662, 0, 0), (-0.9999417202299662, 0.010796117058267551, 0, 0), (0, 0, 1, 0), (-2.85, -2, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "lamp_ikea_arstid__lamp_ikea_arstid__base_link_geom_visual_0_lamp_ikea_arstid" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/lamp_ikea_arstid.usda@</lamp_ikea_arstid>
            )
            {
                rel material:binding = </isr_testbed/world/lamp_ikea_arstid__lamp_ikea_arstid__base_link/lamp_ikea_arstid__lamp_ikea_arstid__base_link_geom_visual_0_lamp_ikea_arstid/Materials/material_2>
                rel mujoco:geom:material = </mujoco/asset/materials/material_2>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/lamp_ikea_arstid_1_0_1_0_2_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 2)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/lamp_ikea_arstid.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 2)
                rel urdf:visual:material = </urdf/robot/materials/material_2>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 2, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material_2" (
                        prepend references = @./isr_testbed/materials/usd/material_2.usda@</material_2>
                    )
                    {
                    }
                }
            }

            def Cylinder "lamp_ikea_arstid__lamp_ikea_arstid__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.13, -0.13, -0.25), (0.13, 0.13, 0.25)]
                double height = 0.5
                point3f mujoco:geom:pos = (0, 0, 0.9)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.13, 0.25, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.13
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.9)
                float urdf:geometry:cylinder:length = 0.5
                float urdf:geometry:cylinder:radius = 0.13
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.9, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "lamp_ikea_arstid__lamp_ikea_arstid__base_link_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.18, -0.18, -0.01), (0.18, 0.18, 0.01)]
                double height = 0.02
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.18, 0.01, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.18
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                float urdf:geometry:cylinder:length = 0.02
                float urdf:geometry:cylinder:radius = 0.18
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "lamp_ikea_arstid__lamp_ikea_arstid__base_link_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.03, -0.03, -0.4), (0.03, 0.03, 0.4)]
                double height = 0.8
                point3f mujoco:geom:pos = (0, 0, 0.42)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.03, 0.4, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.03
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.42)
                float urdf:geometry:cylinder:length = 0.8
                float urdf:geometry:cylinder:radius = 0.03
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.42, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "plant_floor_small__plant_floor_small__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.6526214e-15, 3.7959497e-14, 4.112758e-14)
            float mujoco:body:inertial:mass = -4.4140808e-7
            point3f mujoco:body:inertial:pos = (-2.8400002, -3.05, -2.7939677e-8)
            quatf mujoco:body:inertial:quat = (-0.063260086, 0.80916697, 0.1396331, 0.56722975)
            point3f mujoco:body:pos = (-2.84, -3.05, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.8400002, -3.05, -2.7939677e-8)
            float3 physics:diagonalInertia = (-1.6526214e-15, 3.7959497e-14, 4.112758e-14)
            float physics:mass = -4.4140808e-7
            quatf physics:principalAxes = (-0.063260086, 0.80916697, 0.1396331, 0.56722975)
            float urdf:link:inertial:inertia:ixx = -1.6526214e-15
            float urdf:link:inertial:inertia:iyy = 3.7959497e-14
            float urdf:link:inertial:inertia:izz = 4.112758e-14
            float urdf:link:inertial:mass = -4.4140808e-7
            float3 urdf:link:inertial:origin:rpy = (2.9821749, -1.2100497, 0.45212778)
            point3f urdf:link:inertial:origin:xyz = (-2.8400002, -3.05, -2.7939677e-8)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.84, -3.05, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "plant_floor_small__plant_floor_small__base_link_geom_visual_0_plant_floor_small" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plant_floor_small.usda@</plant_floor_small>
            )
            {
                rel material:binding = </isr_testbed/world/plant_floor_small__plant_floor_small__base_link/plant_floor_small__plant_floor_small__base_link_geom_visual_0_plant_floor_small/Materials/material>
                rel mujoco:geom:material = </mujoco/asset/materials/material>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plant_floor_small>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/plant_floor_small.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material" (
                        prepend references = @./isr_testbed/materials/usd/material.usda@</material>
                    )
                    {
                    }
                }
            }

            def Mesh "plant_floor_small__plant_floor_small__base_link_geom_collision_0_plant_floor_small" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/plant_floor_small.usda@</plant_floor_small>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/plant_floor_small>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/plant_floor_small.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "apple_juice_box__apple_juice__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-3.7678374e-19, -3.3692625e-19, 5.779598e-20)
            float mujoco:body:inertial:mass = -4.690767e-9
            point3f mujoco:body:inertial:pos = (-2.84, 1.64, 1)
            quatf mujoco:body:inertial:quat = (0.06873654, 0.044257883, 0.99647826, 0.018643089)
            point3f mujoco:body:pos = (-2.84, 1.64, 1)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.84, 1.64, 1)
            float3 physics:diagonalInertia = (-3.7678374e-19, -3.3692625e-19, 5.779598e-20)
            float physics:mass = -4.690767e-9
            quatf physics:principalAxes = (0.06873654, 0.044257883, 0.99647826, 0.018643089)
            float urdf:link:inertial:inertia:ixx = -3.7678374e-19
            float urdf:link:inertial:inertia:iyy = -3.3692625e-19
            float urdf:link:inertial:inertia:izz = 5.779598e-20
            float urdf:link:inertial:mass = -4.690767e-9
            float3 urdf:link:inertial:origin:rpy = (3.097938, 0.13575533, 3.0498543)
            point3f urdf:link:inertial:origin:xyz = (-2.84, 1.64, 1)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.84, 1.64, 1, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "apple_juice_box__apple_juice__base_link_geom_visual_0_apple_juice_box" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/apple_juice_box.usda@</apple_juice_box>
            )
            {
                rel material:binding = </isr_testbed/world/apple_juice_box__apple_juice__base_link/apple_juice_box__apple_juice__base_link_geom_visual_0_apple_juice_box/Materials/apple_juice_bottom>
                rel mujoco:geom:material = </mujoco/asset/materials/apple_juice_bottom>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/apple_juice_box>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/apple_juice_box.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/apple_juice_bottom>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "apple_juice_bottom" (
                        prepend references = @./isr_testbed/materials/usd/apple_juice_bottom.usda@</apple_juice_bottom>
                    )
                    {
                    }
                }
            }

            def Cube "apple_juice_box__apple_juice__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.0055)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.0345, 0.0345, 0.1295)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.0055)
                float3 urdf:geometry:box:size = (0.069, 0.069, 0.259)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.0345, 0, 0, 0), (0, 0.0345, 0, 0), (0, 0, 0.1295, 0), (0, 0, 0.0055, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "table_bedside__table_bedside__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.0692839e-8, 3.058456e-8, 4.056448e-8)
            float mujoco:body:inertial:mass = 1.382432e-7
            point3f mujoco:body:inertial:pos = (-3.2185202, -2.8782458, 0.8779672)
            quatf mujoco:body:inertial:quat = (-0.5698486, -0.08557768, 0.8166552, 0.031989004)
            point3f mujoco:body:pos = (-2.82, -2.48, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-3.2185202, -2.8782458, 0.8779672)
            float3 physics:diagonalInertia = (-1.0692839e-8, 3.058456e-8, 4.056448e-8)
            float physics:mass = 1.382432e-7
            quatf physics:principalAxes = (-0.5698486, -0.08557768, 0.8166552, 0.031989004)
            float urdf:link:inertial:inertia:ixx = -1.0692839e-8
            float urdf:link:inertial:inertia:iyy = 3.058456e-8
            float urdf:link:inertial:inertia:izz = 4.056448e-8
            float urdf:link:inertial:mass = 1.382432e-7
            float3 urdf:link:inertial:origin:rpy = (2.7356732, -1.1817324, -2.6584113)
            point3f urdf:link:inertial:origin:xyz = (-3.2185202, -2.8782458, 0.8779672)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.82, -2.48, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "table_bedside__table_bedside__base_link_geom_visual_0_table_bedside" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/table_bedside.usda@</table_bedside>
            )
            {
                rel material:binding = </isr_testbed/world/table_bedside__table_bedside__base_link/table_bedside__table_bedside__base_link_geom_visual_0_table_bedside/Materials/CIMG0283>
                rel mujoco:geom:material = </mujoco/asset/materials/CIMG0283>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/table_bedside_1_7000000476837158_1_7000000476837158_0_8999999761581421>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1.7, 1.7, 0.9)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/table_bedside.obj@
                float3 urdf:geometry:mesh:scale = (1.7, 1.7, 0.9)
                rel urdf:visual:material = </urdf/robot/materials/CIMG0283>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1.7, 0, 0, 0), (0, 1.7, 0, 0), (0, 0, 0.9, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "CIMG0283" (
                        prepend references = @./isr_testbed/materials/usd/CIMG0283.usda@</CIMG0283>
                    )
                    {
                    }
                }
            }

            def Cube "table_bedside__table_bedside__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.3, 0.3, 0.2)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.2)
                float3 urdf:geometry:box:size = (0.6, 0.6, 0.4)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.3, 0, 0, 0), (0, 0.3, 0, 0), (0, 0, 0.2, 0), (0, 0, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "bed__bed__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.00042054517, 0.37360215, 0.37435937)
            float mujoco:body:inertial:mass = 0.0034331519
            point3f mujoco:body:inertial:pos = (-1.4911764, 2.4161491, 0.07340792)
            quatf mujoco:body:inertial:quat = (0.23783278, 0.74211687, 0.5872101, 0.21882032)
            point3f mujoco:body:pos = (-1.94933, 4.30992, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-1.4911764, 2.4161491, 0.07340792)
            float3 physics:diagonalInertia = (0.00042054517, 0.37360215, 0.37435937)
            float physics:mass = 0.0034331519
            quatf physics:principalAxes = (0.23783278, 0.74211687, 0.5872101, 0.21882032)
            float urdf:link:inertial:inertia:ixx = 0.00042054517
            float urdf:link:inertial:inertia:iyy = 0.37360215
            float urdf:link:inertial:inertia:izz = 0.37435937
            float urdf:link:inertial:mass = 0.0034331519
            float3 urdf:link:inertial:origin:rpy = (2.484752, -0.045480546, 1.3542827)
            point3f urdf:link:inertial:origin:xyz = (-1.4911764, 2.4161491, 0.07340792)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.94933, 4.30992, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "bed__bed__link_0_geom_visual_0_instance_0_009" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/instance_0_009.usda@</instance_0_009>
            )
            {
                rel material:binding = </isr_testbed/world/bed__bed__link_0/bed__bed__link_0_geom_visual_0_instance_0_009/Materials/material_001>
                rel mujoco:geom:material = </mujoco/asset/materials/material_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/instance_0_009>
                point3f mujoco:geom:pos = (-1.35, -8, -0.3)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/bed.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (-1.35, -8, -0.3)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-1.35, -8, -0.3, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material_001" (
                        prepend references = @./isr_testbed/materials/usd/material_001.usda@</material_001>
                    )
                    {
                    }
                }
            }

            def Cube "bed__bed__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.2, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.8, 1.1, 0.3)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.2, 0, 0)
                float3 urdf:geometry:box:size = (1.6, 2.2, 0.6)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.8, 0, 0, 0), (0, 1.1, 0, 0), (0, 0, 0.3, 0), (0.2, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "nightstand1__bedroom_nightstand__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (4.830378e-12, 1.8603612e-11, 2.120344e-11)
            float mujoco:body:inertial:mass = -0.000011405366
            point3f mujoco:body:inertial:pos = (-0.6900012, 5.000001, -0.000002455335)
            quatf mujoco:body:inertial:quat = (0.1532001, 0.7912495, -0.19812146, 0.55785465)
            point3f mujoco:body:pos = (-0.69, 5, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-0.6900012, 5.000001, -0.000002455335)
            float3 physics:diagonalInertia = (4.830378e-12, 1.8603612e-11, 2.120344e-11)
            float physics:mass = -0.000011405366
            quatf physics:principalAxes = (0.1532001, 0.7912495, -0.19812146, 0.55785465)
            float urdf:link:inertial:inertia:ixx = 4.830378e-12
            float urdf:link:inertial:inertia:iyy = 1.8603612e-11
            float urdf:link:inertial:inertia:izz = 2.120344e-11
            float urdf:link:inertial:mass = -0.000011405366
            float3 urdf:link:inertial:origin:rpy = (3.076984, -1.2330652, -0.44489715)
            point3f urdf:link:inertial:origin:xyz = (-0.6900012, 5.000001, -0.000002455335)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.69, 5, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "nightstand1__bedroom_nightstand__link_0_geom_visual_0_bedroom_nightstand" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/bedroom_nightstand.usda@</bedroom_nightstand>
            )
            {
                rel material:binding = </isr_testbed/world/nightstand1__bedroom_nightstand__link_0/nightstand1__bedroom_nightstand__link_0_geom_visual_0_bedroom_nightstand/Materials/Material_001>
                rel mujoco:geom:material = </mujoco/asset/materials/Material_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/bedroom_nightstand>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/bedroom_nightstand.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Material_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Material_001" (
                        prepend references = @./isr_testbed/materials/usd/Material_001.usda@</Material_001>
                    )
                    {
                    }
                }
            }

            def Mesh "nightstand1__bedroom_nightstand__link_0_geom_collision_0_bedroom_nightstand" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/bedroom_nightstand.usda@</bedroom_nightstand>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/bedroom_nightstand>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/bedroom_nightstand.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "nightstand2__bedroom_nightstand__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (4.830378e-12, 1.8603612e-11, 2.120344e-11)
            float mujoco:body:inertial:mass = -0.000011405366
            point3f mujoco:body:inertial:pos = (-2.8900013, 5.037131, -0.000002455335)
            quatf mujoco:body:inertial:quat = (0.1532001, 0.7912495, -0.19812146, 0.55785465)
            point3f mujoco:body:pos = (-2.89, 5.03713, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.8900013, 5.037131, -0.000002455335)
            float3 physics:diagonalInertia = (4.830378e-12, 1.8603612e-11, 2.120344e-11)
            float physics:mass = -0.000011405366
            quatf physics:principalAxes = (0.1532001, 0.7912495, -0.19812146, 0.55785465)
            float urdf:link:inertial:inertia:ixx = 4.830378e-12
            float urdf:link:inertial:inertia:iyy = 1.8603612e-11
            float urdf:link:inertial:inertia:izz = 2.120344e-11
            float urdf:link:inertial:mass = -0.000011405366
            float3 urdf:link:inertial:origin:rpy = (3.076984, -1.2330652, -0.44489715)
            point3f urdf:link:inertial:origin:xyz = (-2.8900013, 5.037131, -0.000002455335)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.89, 5.03713, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "nightstand2__bedroom_nightstand__link_0_geom_visual_0_bedroom_nightstand" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/bedroom_nightstand.usda@</bedroom_nightstand>
            )
            {
                rel material:binding = </isr_testbed/world/nightstand2__bedroom_nightstand__link_0/nightstand2__bedroom_nightstand__link_0_geom_visual_0_bedroom_nightstand/Materials/Material_001>
                rel mujoco:geom:material = </mujoco/asset/materials/Material_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/bedroom_nightstand>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/bedroom_nightstand.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Material_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Material_001" (
                        prepend references = @./isr_testbed/materials/usd/Material_001.usda@</Material_001>
                    )
                    {
                    }
                }
            }

            def Mesh "nightstand2__bedroom_nightstand__link_0_geom_collision_0_bedroom_nightstand" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/bedroom_nightstand.usda@</bedroom_nightstand>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/bedroom_nightstand>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/bedroom_nightstand.stl@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "dinning_room_table__dinning_room_table__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-0.00008249376, 0.0058737528, 0.006049736)
            float mujoco:body:inertial:mass = 0.00012353605
            point3f mujoco:body:inertial:pos = (2.1337965, -4.184492, 0.4964567)
            quatf mujoco:body:inertial:quat = (0.8471631, -0.5288491, -0.045935366, 0.02287456)
            point3f mujoco:body:pos = (2.05802, -2.30976, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (2.1337965, -4.184492, 0.4964567)
            float3 physics:diagonalInertia = (-0.00008249376, 0.0058737528, 0.006049736)
            float physics:mass = 0.00012353605
            quatf physics:principalAxes = (0.8471631, -0.5288491, -0.045935366, 0.02287456)
            float urdf:link:inertial:inertia:ixx = -0.00008249376
            float urdf:link:inertial:inertia:iyy = 0.0058737528
            float urdf:link:inertial:inertia:izz = 0.006049736
            float urdf:link:inertial:mass = 0.00012353605
            float3 urdf:link:inertial:origin:rpy = (-1.1184844, -0.05366086, 0.08758055)
            point3f urdf:link:inertial:origin:xyz = (2.1337965, -4.184492, 0.4964567)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.05802, -2.30976, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "dinning_room_table__dinning_room_table__base_link_geom_visual_0_dinning_room_table" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/dinning_room_table.usda@</dinning_room_table>
            )
            {
                rel material:binding = </isr_testbed/world/dinning_room_table__dinning_room_table__base_link/dinning_room_table__dinning_room_table__base_link_geom_visual_0_dinning_room_table/Materials/material_001>
                rel mujoco:geom:material = </mujoco/asset/materials/material_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/dinning_room_table>
                point3f mujoco:geom:pos = (-4.8, -1.2, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/dinning_room_table.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (-4.8, -1.2, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-4.8, -1.2, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material_001" (
                        prepend references = @./isr_testbed/materials/usd/material_001.usda@</material_001>
                    )
                    {
                    }
                }
            }

            def Cylinder "dinning_room_table__dinning_room_table__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.05, -0.05, -0.35), (0.05, 0.05, 0.35)]
                double height = 0.7
                point3f mujoco:geom:pos = (-0.65, -0.4, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.35, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.05
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.65, -0.4, 0.45)
                float urdf:geometry:cylinder:length = 0.7
                float urdf:geometry:cylinder:radius = 0.05
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.65, -0.4, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "dinning_room_table__dinning_room_table__base_link_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.05, -0.05, -0.35), (0.05, 0.05, 0.35)]
                double height = 0.7
                point3f mujoco:geom:pos = (0.55, 0.4, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.35, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.05
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.55, 0.4, 0.45)
                float urdf:geometry:cylinder:length = 0.7
                float urdf:geometry:cylinder:radius = 0.05
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.55, 0.4, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "dinning_room_table__dinning_room_table__base_link_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.04, 0.015, 0.75)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.65, 0.45, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.04, 0.015, 0.75)
                float3 urdf:geometry:box:size = (1.3, 0.9, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.65, 0, 0, 0), (0, 0.45, 0, 0), (0, 0, 0.05, 0), (-0.04, 0.015, 0.75, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "dinning_room_table__dinning_room_table__base_link_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.05, -0.05, -0.35), (0.05, 0.05, 0.35)]
                double height = 0.7
                point3f mujoco:geom:pos = (-0.65, 0.4, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.35, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.05
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.65, 0.4, 0.45)
                float urdf:geometry:cylinder:length = 0.7
                float urdf:geometry:cylinder:radius = 0.05
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.65, 0.4, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cylinder "dinning_room_table__dinning_room_table__base_link_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryCylinderAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-0.05, -0.05, -0.35), (0.05, 0.05, 0.35)]
                double height = 0.7
                point3f mujoco:geom:pos = (0.55, -0.4, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.35, 0)
                uniform token mujoco:geom:type = "cylinder"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                double radius = 0.05
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.55, -0.4, 0.45)
                float urdf:geometry:cylinder:length = 0.7
                float urdf:geometry:cylinder:radius = 0.05
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.55, -0.4, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "table_living_room__table_living_room__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.000004400831, 0.0000058035175, 0.000009088324)
            float mujoco:body:inertial:mass = 0.000029766701
            point3f mujoco:body:inertial:pos = (1.9371861, -0.021759212, 0.3125227)
            quatf mujoco:body:inertial:quat = (-0.48652026, -0.46067232, 0.6878895, 0.2790825)
            point3f mujoco:body:pos = (2, -0.156695, 0)
            quatf mujoco:body:quat = (0.7086488, 0, 0, -0.70556134)
            point3f physics:centerOfMass = (1.9371861, -0.021759212, 0.3125227)
            float3 physics:diagonalInertia = (0.000004400831, 0.0000058035175, 0.000009088324)
            float physics:mass = 0.000029766701
            quatf physics:principalAxes = (-0.48652026, -0.46067232, 0.6878895, 0.2790825)
            float urdf:link:inertial:inertia:ixx = 0.000004400831
            float urdf:link:inertial:inertia:iyy = 0.0000058035175
            float urdf:link:inertial:inertia:izz = 0.000009088324
            float urdf:link:inertial:mass = 0.000029766701
            float3 urdf:link:inertial:origin:rpy = (1.989975, -0.42488194, -1.6831603)
            point3f urdf:link:inertial:origin:xyz = (1.9371861, -0.021759212, 0.3125227)
            matrix4d xformOp:transform = ( (0.004366312921044724, -0.9999904676103046, 0, 0), (0.9999904676103046, 0.004366312921044724, 0, 0), (0, 0, 1, 0), (2, -0.156695, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "table_living_room__table_living_room__base_link_geom_visual_0_table_living_room" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/table_living_room.usda@</table_living_room>
            )
            {
                rel material:binding = </isr_testbed/world/table_living_room__table_living_room__base_link/table_living_room__table_living_room__base_link_geom_visual_0_table_living_room/Materials/wohnzimmertisch>
                rel mujoco:geom:material = </mujoco/asset/materials/wohnzimmertisch>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/table_living_room_1_5_1_2000000476837158_1_399999976158142>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1.5, 1.2, 1.4)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/table_living_room.obj@
                float3 urdf:geometry:mesh:scale = (1.5, 1.2, 1.4)
                rel urdf:visual:material = </urdf/robot/materials/wohnzimmertisch>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1.5, 0, 0, 0), (0, 1.2, 0, 0), (0, 0, 1.4, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "wohnzimmertisch" (
                        prepend references = @./isr_testbed/materials/usd/wohnzimmertisch.usda@</wohnzimmertisch>
                    )
                    {
                    }
                }
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.03, 0.025, 0.35)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.4, 0.65, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.03, 0.025, 0.35)
                float3 urdf:geometry:box:size = (0.8, 1.3, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.4, 0, 0, 0), (0, 0.65, 0, 0), (0, 0, 0.025, 0), (-0.03, 0.025, 0.35, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.03, 0.025, 0.75)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.525, 0.75, 0.04)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.03, 0.025, 0.75)
                float3 urdf:geometry:box:size = (1.05, 1.5, 0.08)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.525, 0, 0, 0), (0, 0.75, 0, 0), (0, 0, 0.04, 0), (-0.03, 0.025, 0.75, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.4, -0.59, 0.39)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.06, 0.06, 0.375)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.4, -0.59, 0.39)
                float3 urdf:geometry:box:size = (0.12, 0.12, 0.75)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.06, 0, 0, 0), (0, 0.06, 0, 0), (0, 0, 0.375, 0), (-0.4, -0.59, 0.39, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.35, -0.59, 0.39)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.06, 0.06, 0.375)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.35, -0.59, 0.39)
                float3 urdf:geometry:box:size = (0.12, 0.12, 0.75)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.06, 0, 0, 0), (0, 0.06, 0, 0), (0, 0, 0.375, 0), (0.35, -0.59, 0.39, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.4, 0.63, 0.39)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.06, 0.06, 0.375)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.4, 0.63, 0.39)
                float3 urdf:geometry:box:size = (0.12, 0.12, 0.75)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.06, 0, 0, 0), (0, 0.06, 0, 0), (0, 0, 0.375, 0), (-0.4, 0.63, 0.39, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "table_living_room__table_living_room__base_link_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.35, 0.63, 0.39)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.06, 0.06, 0.375)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.35, 0.63, 0.39)
                float3 urdf:geometry:box:size = (0.12, 0.12, 0.75)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.06, 0, 0, 0), (0, 0.06, 0, 0), (0, 0, 0.375, 0), (0.35, 0.63, 0.39, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cabinet_diamondback__cabinet_diamondback__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.6850323e-14, 1.3336462e-12, 1.4061386e-12)
            float mujoco:body:inertial:mass = -0.0000014018345
            point3f mujoco:body:inertial:pos = (0.9099998, 1.69, -0.0000011178199)
            quatf mujoco:body:inertial:quat = (0.5995602, -0.30011484, 0.6848038, 0.28548622)
            point3f mujoco:body:pos = (0.91, 1.69, 0)
            quatf mujoco:body:quat = (0.7086488, 0, 0, -0.70556134)
            point3f physics:centerOfMass = (0.9099998, 1.69, -0.0000011178199)
            float3 physics:diagonalInertia = (-1.6850323e-14, 1.3336462e-12, 1.4061386e-12)
            float physics:mass = -0.0000014018345
            quatf physics:principalAxes = (0.5995602, -0.30011484, 0.6848038, 0.28548622)
            float urdf:link:inertial:inertia:ixx = -1.6850323e-14
            float urdf:link:inertial:inertia:iyy = 1.3336462e-12
            float urdf:link:inertial:inertia:izz = 1.4061386e-12
            float urdf:link:inertial:mass = -0.0000014018345
            float3 urdf:link:inertial:origin:rpy = (2.883759, 1.448405, -2.5438507)
            point3f urdf:link:inertial:origin:xyz = (0.9099998, 1.69, -0.0000011178199)
            matrix4d xformOp:transform = ( (0.004366312921044724, -0.9999904676103046, 0, 0), (0.9999904676103046, 0.004366312921044724, 0, 0), (0, 0, 1, 0), (0.91, 1.69, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cabinet_diamondback__cabinet_diamondback__base_link_geom_visual_0_cabinet_diamondback" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/cabinet_diamondback.usda@</cabinet_diamondback>
            )
            {
                rel material:binding = </isr_testbed/world/cabinet_diamondback__cabinet_diamondback__base_link/cabinet_diamondback__cabinet_diamondback__base_link_geom_visual_0_cabinet_diamondback/Materials/material>
                rel mujoco:geom:material = </mujoco/asset/materials/material>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/cabinet_diamondback_1_7999999523162842_1_0_1_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1.8, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/cabinet_diamondback.obj@
                float3 urdf:geometry:mesh:scale = (1.8, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1.8, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material" (
                        prepend references = @./isr_testbed/materials/usd/material.usda@</material>
                    )
                    {
                    }
                }
            }

            def Mesh "cabinet_diamondback__cabinet_diamondback__base_link_geom_collision_0_cabinet_diamondback" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/cabinet_diamondback.usda@</cabinet_diamondback>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/cabinet_diamondback_1_7999999523162842_1_0_1_0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1.8, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/cabinet_diamondback.stl@
                float3 urdf:geometry:mesh:scale = (1.8, 1, 1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (1.8, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "cabinet_ikea_galant__cabinet_ikea_galant__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-5.4205585e-12, 3.9851286e-12, 1.3707247e-11)
            float mujoco:body:inertial:mass = -0.000004967054
            point3f mujoco:body:inertial:pos = (1.7999965, 1.6799972, 9.536743e-7)
            quatf mujoco:body:inertial:quat = (0.95669746, 0.21190715, 0.11039063, -0.16625045)
            point3f mujoco:body:pos = (1.8, 1.68, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (1.7999965, 1.6799972, 9.536743e-7)
            float3 physics:diagonalInertia = (-5.4205585e-12, 3.9851286e-12, 1.3707247e-11)
            float physics:mass = -0.000004967054
            quatf physics:principalAxes = (0.95669746, 0.21190715, 0.11039063, -0.16625045)
            float urdf:link:inertial:inertia:ixx = -5.4205585e-12
            float urdf:link:inertial:inertia:iyy = 3.9851286e-12
            float urdf:link:inertial:inertia:izz = 1.3707247e-11
            float urdf:link:inertial:mass = -0.000004967054
            float3 urdf:link:inertial:origin:rpy = (0.39446983, 0.28554475, -0.286678)
            point3f urdf:link:inertial:origin:xyz = (1.7999965, 1.6799972, 9.536743e-7)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.8, 1.68, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "cabinet_ikea_galant__cabinet_ikea_galant__base_link_geom_visual_0_cabinet_ikea_galant" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/cabinet_ikea_galant.usda@</cabinet_ikea_galant>
            )
            {
                rel material:binding = </isr_testbed/world/cabinet_ikea_galant__cabinet_ikea_galant__base_link/cabinet_ikea_galant__cabinet_ikea_galant__base_link_geom_visual_0_cabinet_ikea_galant/Materials/cabinet_ikea_galant_sides>
                rel mujoco:geom:material = </mujoco/asset/materials/cabinet_ikea_galant_sides>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/cabinet_ikea_galant_0_7999956011772156_1_200002908706665_0_800000011920929>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (-0.70710546, 0, 0, 0.7071081)
                vector3f mujoco:geom:size = (0.7999956, 1.2000029, 0.8)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/cabinet_ikea_galant.obj@
                float3 urdf:geometry:mesh:scale = (0.7999956, 1.2000029, 0.8)
                rel urdf:visual:material = </urdf/robot/materials/cabinet_ikea_galant_sides>
                float3 urdf:visual:origin:rpy = (0, -0, -1.5708)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (-0.0000029385478916125167, -0.7999955921430821, 0, 0), (1.200002938547892, -0.000004407856917751676, 0, 0), (0, 0, 0.8, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "cabinet_ikea_galant_sides" (
                        prepend references = @./isr_testbed/materials/usd/cabinet_ikea_galant_sides.usda@</cabinet_ikea_galant_sides>
                    )
                    {
                    }
                }
            }

            def Cube "cabinet_ikea_galant__cabinet_ikea_galant__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0.33)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.65, 0.27, 0.33)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0.33)
                float3 urdf:geometry:box:size = (1.3, 0.54, 0.66)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.65, 0, 0, 0), (0, 0.27, 0, 0), (0, 0, 0.33, 0), (0, 0, 0.33, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tray_blue_white__tray_blue_white__base_link" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-4.410445e-18, 1.8439804e-16, 1.9792101e-16)
            float mujoco:body:inertial:mass = -7.2607996e-8
            point3f mujoco:body:inertial:pos = (2.1200001, 1.67, 0.68)
            quatf mujoco:body:inertial:quat = (0.42160755, 0.81788206, 0.36902156, 0.13091634)
            point3f mujoco:body:pos = (2.12, 1.67, 0.68)
            quatf mujoco:body:quat = (0.71791065, 0, 0, -0.6961352)
            point3f physics:centerOfMass = (2.1200001, 1.67, 0.68)
            float3 physics:diagonalInertia = (-4.410445e-18, 1.8439804e-16, 1.9792101e-16)
            float physics:mass = -7.2607996e-8
            quatf physics:principalAxes = (0.42160755, 0.81788206, 0.36902156, 0.13091634)
            float urdf:link:inertial:inertia:ixx = -4.410445e-18
            float urdf:link:inertial:inertia:iyy = 1.8439804e-16
            float urdf:link:inertial:inertia:izz = 1.9792101e-16
            float urdf:link:inertial:mass = -7.2607996e-8
            float3 urdf:link:inertial:origin:rpy = (2.2307854, 0.09716914, 0.80007315)
            point3f urdf:link:inertial:origin:xyz = (2.1200001, 1.67, 0.68)
            matrix4d xformOp:transform = ( (0.030791459082466277, -0.999525830605479, 0, 0), (0.999525830605479, 0.030791459082466277, 0, 0), (0, 0, 1, 0), (2.12, 1.67, 0.68, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tray_blue_white__tray_blue_white__base_link_geom_visual_0_tray_blue_white" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tray_blue_white.usda@</tray_blue_white>
            )
            {
                rel material:binding = </isr_testbed/world/tray_blue_white__tray_blue_white__base_link/tray_blue_white__tray_blue_white__base_link_geom_visual_0_tray_blue_white/Materials/material>
                rel mujoco:geom:material = </mujoco/asset/materials/material>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tray_blue_white_0_6000000238418579_0_6000000238418579_0_800000011920929>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.6, 0.6, 0.8)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tray_blue_white.obj@
                float3 urdf:geometry:mesh:scale = (0.6, 0.6, 0.8)
                rel urdf:visual:material = </urdf/robot/materials/material>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (0.6, 0, 0, 0), (0, 0.6, 0, 0), (0, 0, 0.8, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material" (
                        prepend references = @./isr_testbed/materials/usd/material.usda@</material>
                    )
                    {
                    }
                }
            }

            def Cube "tray_blue_white__tray_blue_white__base_link_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.115, 0.15, 0.008)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                float3 urdf:geometry:box:size = (0.23, 0.3, 0.016)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.115, 0, 0, 0), (0, 0.15, 0, 0), (0, 0, 0.008, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair_dinning_room_1__simple_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float mujoco:body:inertial:mass = -0.0000021179858
            point3f mujoco:body:inertial:pos = (1.9099995, -3.0499995, 6.335231e-7)
            quatf mujoco:body:inertial:quat = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            point3f mujoco:body:pos = (1.91, -3.05, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (1.9099995, -3.0499995, 6.335231e-7)
            float3 physics:diagonalInertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float physics:mass = -0.0000021179858
            quatf physics:principalAxes = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            float urdf:link:inertial:inertia:ixx = -1.5520794e-12
            float urdf:link:inertial:inertia:iyy = -8.3308414e-13
            float urdf:link:inertial:inertia:izz = 5.3492925e-13
            float urdf:link:inertial:mass = -0.0000021179858
            float3 urdf:link:inertial:origin:rpy = (-0.016991504, 0.1642358, -0.7309063)
            point3f urdf:link:inertial:origin:xyz = (1.9099995, -3.0499995, 6.335231e-7)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.91, -3.05, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair_dinning_room_1__simple_chair__link_0_geom_visual_0_simple_chair_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/simple_chair_001.usda@</simple_chair_001>
            )
            {
                rel material:binding = </isr_testbed/world/chair_dinning_room_1__simple_chair__link_0/chair_dinning_room_1__simple_chair__link_0_geom_visual_0_simple_chair_001/Materials/__Color_007_4>
                rel mujoco:geom:material = </mujoco/asset/materials/__Color_007_4>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/simple_chair_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/simple_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/__Color_007_4>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "__Color_007_4" (
                        prepend references = @./isr_testbed/materials/usd/__Color_007_4.usda@</__Color_007_4>
                    )
                    {
                    }
                }
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.05, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.225, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.05, 0.45)
                float3 urdf:geometry:box:size = (0.5, 0.45, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.025, 0), (0.15, -0.05, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.22, 0.6)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.0375, 0.19)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.22, 0.6)
                float3 urdf:geometry:box:size = (0.5, 0.075, 0.38)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.0375, 0, 0), (0, 0, 0.19, 0), (0.15, -0.22, 0.6, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_1__simple_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair_dinning_room_2__simple_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float mujoco:body:inertial:mass = -0.0000021179858
            point3f mujoco:body:inertial:pos = (2.9599996, -2.5200005, 6.335231e-7)
            quatf mujoco:body:inertial:quat = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            point3f mujoco:body:pos = (2.96, -2.52, 0)
            quatf mujoco:body:quat = (0.7151344, 0, 0, 0.698987)
            point3f physics:centerOfMass = (2.9599996, -2.5200005, 6.335231e-7)
            float3 physics:diagonalInertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float physics:mass = -0.0000021179858
            quatf physics:principalAxes = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            float urdf:link:inertial:inertia:ixx = -1.5520794e-12
            float urdf:link:inertial:inertia:iyy = -8.3308414e-13
            float urdf:link:inertial:inertia:izz = 5.3492925e-13
            float urdf:link:inertial:mass = -0.0000021179858
            float3 urdf:link:inertial:origin:rpy = (-0.016991504, 0.1642358, -0.7309063)
            point3f urdf:link:inertial:origin:xyz = (2.9599996, -2.5200005, 6.335231e-7)
            matrix4d xformOp:transform = ( (0.022834341997537977, 0.9997392624207272, 0, 0), (-0.9997392624207272, 0.022834341997537977, 0, 0), (0, 0, 1, 0), (2.96, -2.52, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair_dinning_room_2__simple_chair__link_0_geom_visual_0_simple_chair_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/simple_chair_001.usda@</simple_chair_001>
            )
            {
                rel material:binding = </isr_testbed/world/chair_dinning_room_2__simple_chair__link_0/chair_dinning_room_2__simple_chair__link_0_geom_visual_0_simple_chair_001/Materials/__Color_007_4>
                rel mujoco:geom:material = </mujoco/asset/materials/__Color_007_4>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/simple_chair_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/simple_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/__Color_007_4>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "__Color_007_4" (
                        prepend references = @./isr_testbed/materials/usd/__Color_007_4.usda@</__Color_007_4>
                    )
                    {
                    }
                }
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.05, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.225, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.05, 0.45)
                float3 urdf:geometry:box:size = (0.5, 0.45, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.025, 0), (0.15, -0.05, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.22, 0.6)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.0375, 0.19)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.22, 0.6)
                float3 urdf:geometry:box:size = (0.5, 0.075, 0.38)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.0375, 0, 0), (0, 0, 0.19, 0), (0.15, -0.22, 0.6, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_dinning_room_2__simple_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair_kitchen_1__simple_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float mujoco:body:inertial:mass = -0.0000021179858
            point3f mujoco:body:inertial:pos = (1.5699995, -0.9799996, 6.335231e-7)
            quatf mujoco:body:inertial:quat = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            point3f mujoco:body:pos = (1.57, -0.98, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (1.5699995, -0.9799996, 6.335231e-7)
            float3 physics:diagonalInertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float physics:mass = -0.0000021179858
            quatf physics:principalAxes = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            float urdf:link:inertial:inertia:ixx = -1.5520794e-12
            float urdf:link:inertial:inertia:iyy = -8.3308414e-13
            float urdf:link:inertial:inertia:izz = 5.3492925e-13
            float urdf:link:inertial:mass = -0.0000021179858
            float3 urdf:link:inertial:origin:rpy = (-0.016991504, 0.1642358, -0.7309063)
            point3f urdf:link:inertial:origin:xyz = (1.5699995, -0.9799996, 6.335231e-7)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (1.57, -0.98, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair_kitchen_1__simple_chair__link_0_geom_visual_0_simple_chair_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/simple_chair_001.usda@</simple_chair_001>
            )
            {
                rel material:binding = </isr_testbed/world/chair_kitchen_1__simple_chair__link_0/chair_kitchen_1__simple_chair__link_0_geom_visual_0_simple_chair_001/Materials/__Color_007_4>
                rel mujoco:geom:material = </mujoco/asset/materials/__Color_007_4>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/simple_chair_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/simple_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/__Color_007_4>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "__Color_007_4" (
                        prepend references = @./isr_testbed/materials/usd/__Color_007_4.usda@</__Color_007_4>
                    )
                    {
                    }
                }
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.22, 0.6)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.0375, 0.19)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.22, 0.6)
                float3 urdf:geometry:box:size = (0.5, 0.075, 0.38)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.0375, 0, 0), (0, 0, 0.19, 0), (0.15, -0.22, 0.6, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.05, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.225, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.05, 0.45)
                float3 urdf:geometry:box:size = (0.5, 0.45, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.025, 0), (0.15, -0.05, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_1__simple_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair_kitchen_2__simple_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float mujoco:body:inertial:mass = -0.0000021179858
            point3f mujoco:body:inertial:pos = (2.2599995, -0.9699996, 6.335231e-7)
            quatf mujoco:body:inertial:quat = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            point3f mujoco:body:pos = (2.26, -0.97, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (2.2599995, -0.9699996, 6.335231e-7)
            float3 physics:diagonalInertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float physics:mass = -0.0000021179858
            quatf physics:principalAxes = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            float urdf:link:inertial:inertia:ixx = -1.5520794e-12
            float urdf:link:inertial:inertia:iyy = -8.3308414e-13
            float urdf:link:inertial:inertia:izz = 5.3492925e-13
            float urdf:link:inertial:mass = -0.0000021179858
            float3 urdf:link:inertial:origin:rpy = (-0.016991504, 0.1642358, -0.7309063)
            point3f urdf:link:inertial:origin:xyz = (2.2599995, -0.9699996, 6.335231e-7)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (2.26, -0.97, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair_kitchen_2__simple_chair__link_0_geom_visual_0_simple_chair_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/simple_chair_001.usda@</simple_chair_001>
            )
            {
                rel material:binding = </isr_testbed/world/chair_kitchen_2__simple_chair__link_0/chair_kitchen_2__simple_chair__link_0_geom_visual_0_simple_chair_001/Materials/__Color_007_4>
                rel mujoco:geom:material = </mujoco/asset/materials/__Color_007_4>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/simple_chair_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/simple_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/__Color_007_4>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "__Color_007_4" (
                        prepend references = @./isr_testbed/materials/usd/__Color_007_4.usda@</__Color_007_4>
                    )
                    {
                    }
                }
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.05, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.225, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.05, 0.45)
                float3 urdf:geometry:box:size = (0.5, 0.45, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.025, 0), (0.15, -0.05, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.22, 0.6)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.0375, 0.19)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.22, 0.6)
                float3 urdf:geometry:box:size = (0.5, 0.075, 0.38)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.0375, 0, 0), (0, 0, 0.19, 0), (0.15, -0.22, 0.6, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_2__simple_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair_kitchen_3__simple_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float mujoco:body:inertial:mass = -0.0000021179858
            point3f mujoco:body:inertial:pos = (2.8799996, -0.26000056, 6.335231e-7)
            quatf mujoco:body:inertial:quat = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            point3f mujoco:body:pos = (2.88, -0.26, 0)
            quatf mujoco:body:quat = (0.7002848, 0, 0, 0.7138636)
            point3f physics:centerOfMass = (2.8799996, -0.26000056, 6.335231e-7)
            float3 physics:diagonalInertia = (-1.5520794e-12, -8.3308414e-13, 5.3492925e-13)
            float physics:mass = -0.0000021179858
            quatf physics:principalAxes = (0.9310301, 0.02140478, 0.07963194, -0.3555046)
            float urdf:link:inertial:inertia:ixx = -1.5520794e-12
            float urdf:link:inertial:inertia:iyy = -8.3308414e-13
            float urdf:link:inertial:inertia:izz = 5.3492925e-13
            float urdf:link:inertial:mass = -0.0000021179858
            float3 urdf:link:inertial:origin:rpy = (-0.016991504, 0.1642358, -0.7309063)
            point3f urdf:link:inertial:origin:xyz = (2.8799996, -0.26000056, 6.335231e-7)
            matrix4d xformOp:transform = ( (-0.019202492901692736, 0.999815615134291, 0, 0), (-0.999815615134291, -0.019202492901692736, 0, 0), (0, 0, 1, 0), (2.88, -0.26, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair_kitchen_3__simple_chair__link_0_geom_visual_0_simple_chair_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/simple_chair_001.usda@</simple_chair_001>
            )
            {
                rel material:binding = </isr_testbed/world/chair_kitchen_3__simple_chair__link_0/chair_kitchen_3__simple_chair__link_0_geom_visual_0_simple_chair_001/Materials/__Color_007_4>
                rel mujoco:geom:material = </mujoco/asset/materials/__Color_007_4>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/simple_chair_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/simple_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/__Color_007_4>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "__Color_007_4" (
                        prepend references = @./isr_testbed/materials/usd/__Color_007_4.usda@</__Color_007_4>
                    )
                    {
                    }
                }
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.22, 0.6)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.0375, 0.19)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.22, 0.6)
                float3 urdf:geometry:box:size = (0.5, 0.075, 0.38)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.0375, 0, 0), (0, 0, 0.19, 0), (0.15, -0.22, 0.6, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.15, -0.05, 0.45)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.25, 0.225, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.15, -0.05, 0.45)
                float3 urdf:geometry:box:size = (0.5, 0.45, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.25, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.025, 0), (0.15, -0.05, 0.45, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, -0.25, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, -0.25, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (-0.05, -0.25, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair_kitchen_3__simple_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, 0.15, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.04, 0.04, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, 0.15, 0.2)
                float3 urdf:geometry:box:size = (0.08, 0.08, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.04, 0, 0, 0), (0, 0.04, 0, 0), (0, 0, 0.25, 0), (0.33, 0.15, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "sofa__sofa__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (0.00003404372, 0.0000728726, 0.000097217875)
            float mujoco:body:inertial:mass = 0.00015936137
            point3f mujoco:body:inertial:pos = (-0.92196614, -0.7278339, 0.46929395)
            quatf mujoco:body:inertial:quat = (-0.51203716, 0.48827335, 0.67910737, -0.19549996)
            point3f mujoco:body:pos = (-0.76, -0.9, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-0.92196614, -0.7278339, 0.46929395)
            float3 physics:diagonalInertia = (0.00003404372, 0.0000728726, 0.000097217875)
            float physics:mass = 0.00015936137
            quatf physics:principalAxes = (-0.51203716, 0.48827335, 0.67910737, -0.19549996)
            float urdf:link:inertial:inertia:ixx = 0.00003404372
            float urdf:link:inertial:inertia:iyy = 0.0000728726
            float urdf:link:inertial:inertia:izz = 0.000097217875
            float urdf:link:inertial:mass = 0.00015936137
            float3 urdf:link:inertial:origin:rpy = (-2.0514507, -0.5288509, 1.5694228)
            point3f urdf:link:inertial:origin:xyz = (-0.92196614, -0.7278339, 0.46929395)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.76, -0.9, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "sofa__sofa__link_0_geom_visual_0_sofa_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/sofa_001.usda@</sofa_001>
            )
            {
                rel material:binding = </isr_testbed/world/sofa__sofa__link_0/sofa__sofa__link_0_geom_visual_0_sofa_001/Materials/Material_001>
                rel mujoco:geom:material = </mujoco/asset/materials/Material_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/sofa_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/sofa.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Material_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Material_001" (
                        prepend references = @./isr_testbed/materials/usd/Material_001.usda@</Material_001>
                    )
                    {
                    }
                }
            }

            def Cube "sofa__sofa__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.05, 0, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.465, 0.915, 0.185)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.05, 0, 0.2)
                float3 urdf:geometry:box:size = (0.93, 1.83, 0.37)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.465, 0, 0, 0), (0, 0.915, 0, 0), (0, 0, 0.185, 0), (0.05, 0, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "sofa__sofa__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.35, 0, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.15, 0.915, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.35, 0, 0.5)
                float3 urdf:geometry:box:size = (0.3, 1.83, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, 0.915, 0, 0), (0, 0, 0.25, 0), (0.35, 0, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "sofa__sofa__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.8, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.4, 0.125, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.8, 0.5)
                float3 urdf:geometry:box:size = (0.8, 0.25, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.4, 0, 0, 0), (0, 0.125, 0, 0), (0, 0, 0.25, 0), (0, -0.8, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "sofa__sofa__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0.8, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.4, 0.125, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0.8, 0.5)
                float3 urdf:geometry:box:size = (0.8, 0.25, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.4, 0, 0, 0), (0, 0.125, 0, 0), (0, 0, 0.25, 0), (0, 0.8, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair1__tv_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (4.3323154e-11, 3.713761e-10, 4.1938175e-10)
            float mujoco:body:inertial:mass = -0.00003139732
            point3f mujoco:body:inertial:pos = (-0.7300031, -2.0499978, -0.000016762779)
            quatf mujoco:body:inertial:quat = (0.34071642, 0.70503926, -0.11604045, 0.61103725)
            point3f mujoco:body:pos = (-0.73, -2.05, 0)
            quatf mujoco:body:quat = (0.7073883, 0, 0, -0.7068252)
            point3f physics:centerOfMass = (-0.7300031, -2.0499978, -0.000016762779)
            float3 physics:diagonalInertia = (4.3323154e-11, 3.713761e-10, 4.1938175e-10)
            float physics:mass = -0.00003139732
            quatf physics:principalAxes = (0.34071642, 0.70503926, -0.11604045, 0.61103725)
            float urdf:link:inertial:inertia:ixx = 4.3323154e-11
            float urdf:link:inertial:inertia:iyy = 3.713761e-10
            float urdf:link:inertial:inertia:izz = 4.1938175e-10
            float urdf:link:inertial:mass = -0.00003139732
            float3 urdf:link:inertial:origin:rpy = (1.6330014, -1.2246417, 0.8404855)
            point3f urdf:link:inertial:origin:xyz = (-0.7300031, -2.0499978, -0.000016762779)
            matrix4d xformOp:transform = ( (0.0007963267107329308, -0.9999996829318347, 0, 0), (0.9999996829318347, 0.0007963267107329308, 0, 0), (0, 0, 1, 0), (-0.73, -2.05, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair1__tv_chair__link_0_geom_visual_0_tv_chair1d01d01d0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tv_chair1d01d01d0.usda@</tv_chair1d01d01d0>
            )
            {
                rel material:binding = </isr_testbed/world/chair1__tv_chair__link_0/chair1__tv_chair__link_0_geom_visual_0_tv_chair1d01d01d0/Materials/Wood_Bamboo_Medium_001>
                rel mujoco:geom:material = </mujoco/asset/materials/Wood_Bamboo_Medium_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tv_chair1d01d01d0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tv_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Wood_Bamboo_Medium_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Wood_Bamboo_Medium_001" (
                        prepend references = @./isr_testbed/materials/usd/Wood_Bamboo_Medium_001.usda@</Wood_Bamboo_Medium_001>
                    )
                    {
                    }
                }
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.1, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.225, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.1, 0.5)
                float3 urdf:geometry:box:size = (0.1, 0.45, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.05, 0), (0.33, -0.1, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0.18, 0.65)
                quatf mujoco:geom:quat = (0.9800666, -0.19866933, 0, 0)
                vector3f mujoco:geom:size = (0.3, 0.1, 0.425)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (-0.4, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0.18, 0.65)
                float3 urdf:geometry:box:size = (0.6, 0.2, 0.85)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.3, 0, 0, 0), (0, 0.09210609940028852, -0.03894183423086506, 0), (0, 0.16550279548117647, 0.39145092245122615, 0), (0, 0.18, 0.65, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.1, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.35, 0.3, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.1, 0)
                float3 urdf:geometry:box:size = (0.7, 0.6, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.3, 0, 0), (0, 0, 0.025, 0), (0, -0.1, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.33, 0.3)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.05, 0.225)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.33, 0.3)
                float3 urdf:geometry:box:size = (0.1, 0.1, 0.45)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.05, 0, 0), (0, 0, 0.225, 0), (0.33, -0.33, 0.3, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.33, -0.33, 0.3)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.05, 0.225)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.33, -0.33, 0.3)
                float3 urdf:geometry:box:size = (0.1, 0.1, 0.45)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.05, 0, 0), (0, 0, 0.225, 0), (-0.33, -0.33, 0.3, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.33, -0.1, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.225, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.33, -0.1, 0.5)
                float3 urdf:geometry:box:size = (0.1, 0.45, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.05, 0), (-0.33, -0.1, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair1__tv_chair__link_0_geom_collision_6" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.2, 0.35)
                quatf mujoco:geom:quat = (0.990216, -0.13954312, 0, 0)
                vector3f mujoco:geom:size = (0.35, 0.25, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (-0.28, 0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.2, 0.35)
                float3 urdf:geometry:box:size = (0.7, 0.5, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2402638595776927, -0.06908891214102843, 0), (0, 0.013817782428205689, 0.04805277191553855, 0), (0, -0.2, 0.35, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "chair2__tv_chair__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (4.3323154e-11, 3.713761e-10, 4.1938175e-10)
            float mujoco:body:inertial:mass = -0.00003139732
            point3f mujoco:body:inertial:pos = (-0.7300031, 0.57000214, -0.000016762779)
            quatf mujoco:body:inertial:quat = (0.34071642, 0.70503926, -0.11604045, 0.61103725)
            point3f mujoco:body:pos = (-0.73, 0.57, 0)
            quatf mujoco:body:quat = (0.7073883, 0, 0, -0.7068252)
            point3f physics:centerOfMass = (-0.7300031, 0.57000214, -0.000016762779)
            float3 physics:diagonalInertia = (4.3323154e-11, 3.713761e-10, 4.1938175e-10)
            float physics:mass = -0.00003139732
            quatf physics:principalAxes = (0.34071642, 0.70503926, -0.11604045, 0.61103725)
            float urdf:link:inertial:inertia:ixx = 4.3323154e-11
            float urdf:link:inertial:inertia:iyy = 3.713761e-10
            float urdf:link:inertial:inertia:izz = 4.1938175e-10
            float urdf:link:inertial:mass = -0.00003139732
            float3 urdf:link:inertial:origin:rpy = (1.6330014, -1.2246417, 0.8404855)
            point3f urdf:link:inertial:origin:xyz = (-0.7300031, 0.57000214, -0.000016762779)
            matrix4d xformOp:transform = ( (0.0007963267107329308, -0.9999996829318347, 0, 0), (0.9999996829318347, 0.0007963267107329308, 0, 0), (0, 0, 1, 0), (-0.73, 0.57, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "chair2__tv_chair__link_0_geom_visual_0_tv_chair1d01d01d0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tv_chair1d01d01d0.usda@</tv_chair1d01d01d0>
            )
            {
                rel material:binding = </isr_testbed/world/chair2__tv_chair__link_0/chair2__tv_chair__link_0_geom_visual_0_tv_chair1d01d01d0/Materials/Wood_Bamboo_Medium_001>
                rel mujoco:geom:material = </mujoco/asset/materials/Wood_Bamboo_Medium_001>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tv_chair1d01d01d0>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tv_chair.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Wood_Bamboo_Medium_001>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Wood_Bamboo_Medium_001" (
                        prepend references = @./isr_testbed/materials/usd/Wood_Bamboo_Medium_001.usda@</Wood_Bamboo_Medium_001>
                    )
                    {
                    }
                }
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, 0.18, 0.65)
                quatf mujoco:geom:quat = (0.9800666, -0.19866933, 0, 0)
                vector3f mujoco:geom:size = (0.3, 0.1, 0.425)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (-0.4, 0, 0)
                point3f urdf:collision:origin:xyz = (0, 0.18, 0.65)
                float3 urdf:geometry:box:size = (0.6, 0.2, 0.85)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.3, 0, 0, 0), (0, 0.09210609940028852, -0.03894183423086506, 0), (0, 0.16550279548117647, 0.39145092245122615, 0), (0, 0.18, 0.65, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_1" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.33, -0.1, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.225, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.33, -0.1, 0.5)
                float3 urdf:geometry:box:size = (0.1, 0.45, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.05, 0), (-0.33, -0.1, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_2" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.1, 0.5)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.225, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.1, 0.5)
                float3 urdf:geometry:box:size = (0.1, 0.45, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.225, 0, 0), (0, 0, 0.05, 0), (0.33, -0.1, 0.5, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_3" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.33, -0.33, 0.3)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.05, 0.225)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.33, -0.33, 0.3)
                float3 urdf:geometry:box:size = (0.1, 0.1, 0.45)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.05, 0, 0), (0, 0, 0.225, 0), (-0.33, -0.33, 0.3, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_4" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.33, -0.33, 0.3)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.05, 0.05, 0.225)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.33, -0.33, 0.3)
                float3 urdf:geometry:box:size = (0.1, 0.1, 0.45)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.05, 0, 0, 0), (0, 0.05, 0, 0), (0, 0, 0.225, 0), (0.33, -0.33, 0.3, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_5" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.1, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.35, 0.3, 0.025)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.1, 0)
                float3 urdf:geometry:box:size = (0.7, 0.6, 0.05)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.3, 0, 0), (0, 0, 0.025, 0), (0, -0.1, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }

            def Cube "chair2__tv_chair__link_0_geom_collision_6" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0, -0.2, 0.35)
                quatf mujoco:geom:quat = (0.990216, -0.13954312, 0, 0)
                vector3f mujoco:geom:size = (0.35, 0.25, 0.05)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (-0.28, 0, 0)
                point3f urdf:collision:origin:xyz = (0, -0.2, 0.35)
                float3 urdf:geometry:box:size = (0.7, 0.5, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.35, 0, 0, 0), (0, 0.2402638595776927, -0.06908891214102843, 0), (0, 0.013817782428205689, 0.04805277191553855, 0), (0, -0.2, 0.35, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tv__tv__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (4.2927417e-7, 0.0000039098804, 0.0000043040527)
            float mujoco:body:inertial:mass = 0.0000032758483
            point3f mujoco:body:inertial:pos = (-2.7742689, -0.73025805, 1.1097713)
            quatf mujoco:body:inertial:quat = (0.7177894, 0.009100901, -0.6957187, 0.025902722)
            point3f mujoco:body:pos = (-2.85, -0.94, 0.035264)
            quatf mujoco:body:quat = (0.9999155, 0, 0, -0.012999634)
            point3f physics:centerOfMass = (-2.7742689, -0.73025805, 1.1097713)
            float3 physics:diagonalInertia = (4.2927417e-7, 0.0000039098804, 0.0000043040527)
            float physics:mass = 0.0000032758483
            quatf physics:principalAxes = (0.7177894, 0.009100901, -0.6957187, 0.025902722)
            float urdf:link:inertial:inertia:ixx = 4.2927417e-7
            float urdf:link:inertial:inertia:iyy = 0.0000039098804
            float urdf:link:inertial:inertia:izz = 0.0000043040527
            float urdf:link:inertial:mass = 0.0000032758483
            float3 urdf:link:inertial:origin:rpy = (-0.625918, -1.5315658, 0.6754351)
            point3f urdf:link:inertial:origin:xyz = (-2.7742689, -0.73025805, 1.1097713)
            matrix4d xformOp:transform = ( (0.9996620190402377, -0.025997070765676537, 0, 0), (0.025997070765676537, 0.9996620190402377, 0, 0), (0, 0, 1, 0), (-2.85, -0.94, 0.035264, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tv__tv__link_0_geom_visual_0_tv_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tv_001.usda@</tv_001>
            )
            {
                rel material:binding = </isr_testbed/world/tv__tv__link_0/tv__tv__link_0_geom_visual_0_tv_001/Materials/material_9>
                rel mujoco:geom:material = </mujoco/asset/materials/material_9>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tv_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tv.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/material_9>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "material_9" (
                        prepend references = @./isr_testbed/materials/usd/material_9.usda@</material_9>
                    )
                    {
                    }
                }
            }

            def Cube "tv__tv__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (0.05, -0.08, 0.8)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.15, 0.6, 0.4)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0.05, -0.08, 0.8)
                float3 urdf:geometry:box:size = (0.3, 1.2, 0.8)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, 0.6, 0, 0), (0, 0, 0.4, 0), (0.05, -0.08, 0.8, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "tv_table__tv_table__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (3.4498424e-12, 1.8781384e-11, 2.5495989e-11)
            float mujoco:body:inertial:mass = -0.0000080520595
            point3f mujoco:body:inertial:pos = (-2.8100011, -0.9800004, -0.000002775283)
            quatf mujoco:body:inertial:quat = (0.65536314, -0.24274452, -0.46826017, 0.54065394)
            point3f mujoco:body:pos = (-2.81, -0.98, 0)
            quatf mujoco:body:quat = (1, 0, 0, 0)
            point3f physics:centerOfMass = (-2.8100011, -0.9800004, -0.000002775283)
            float3 physics:diagonalInertia = (3.4498424e-12, 1.8781384e-11, 2.5495989e-11)
            float physics:mass = -0.0000080520595
            quatf physics:principalAxes = (0.65536314, -0.24274452, -0.46826017, 0.54065394)
            float urdf:link:inertial:inertia:ixx = 3.4498424e-12
            float urdf:link:inertial:inertia:iyy = 1.8781384e-11
            float urdf:link:inertial:inertia:izz = 2.5495989e-11
            float urdf:link:inertial:mass = -0.0000080520595
            float3 urdf:link:inertial:origin:rpy = (-1.0771834, -0.35893717, 1.595523)
            point3f urdf:link:inertial:origin:xyz = (-2.8100011, -0.9800004, -0.000002775283)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-2.81, -0.98, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "tv_table__tv_table__link_0_geom_visual_0_tv_table_001" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/tv_table_001.usda@</tv_table_001>
            )
            {
                rel material:binding = </isr_testbed/world/tv_table__tv_table__link_0/tv_table__tv_table__link_0_geom_visual_0_tv_table_001/Materials/Material_003>
                rel mujoco:geom:material = </mujoco/asset/materials/Material_003>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/tv_table_001>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (1, 1, 1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/tv_table.obj@
                float3 urdf:geometry:mesh:scale = (1, 1, 1)
                rel urdf:visual:material = </urdf/robot/materials/Material_003>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Material_003" (
                        prepend references = @./isr_testbed/materials/usd/Material_003.usda@</Material_003>
                    )
                    {
                    }
                }
            }

            def Cube "tv_table__tv_table__link_0_geom_collision_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryBoxAPI", "MujocoGeomAPI"]
            )
            {
                float3[] extent = [(-1, -1, -1), (1, 1, 1)]
                point3f mujoco:geom:pos = (-0.05, 0.05, 0.2)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.2, 0.825, 0.25)
                uniform token mujoco:geom:type = "box"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (-0.05, 0.05, 0.2)
                float3 urdf:geometry:box:size = (0.4, 1.65, 0.5)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.2, 0, 0, 0), (0, 0.825, 0, 0), (0, 0, 0.25, 0), (-0.05, 0.05, 0.2, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }

        def Xform "aruco_marker_0__aruco_marker_0__link_0" (
            prepend apiSchemas = ["UrdfLinkAPI", "PhysicsMassAPI", "UrdfLinkInertialAPI", "MujocoBodyInertialAPI", "MujocoBodyAPI"]
        )
        {
            float3 mujoco:body:inertial:diaginertia = (22.45226, 22.452269, 44.901344)
            float mujoco:body:inertial:mass = 67.352005
            point3f mujoco:body:inertial:pos = (1.4999999, 1.96, 0.8)
            quatf mujoco:body:inertial:quat = (0.5724389, 0.4151069, -0.5724389, -0.4151069)
            point3f mujoco:body:pos = (1.5, 1.96, 0.8)
            quatf mujoco:body:quat = (0.70710677, 0, 0, -0.70710677)
            point3f physics:centerOfMass = (1.4999999, 1.96, 0.8)
            float3 physics:diagonalInertia = (22.45226, 22.452269, 44.901344)
            float physics:mass = 67.352005
            quatf physics:principalAxes = (0.5724389, 0.4151069, -0.5724389, -0.4151069)
            float urdf:link:inertial:inertia:ixx = 22.45226
            float urdf:link:inertial:inertia:iyy = 22.452269
            float urdf:link:inertial:inertia:izz = 44.901344
            float urdf:link:inertial:mass = 67.352005
            float3 urdf:link:inertial:origin:rpy = (1.5707964, -0.31597683, -1.5707964)
            point3f urdf:link:inertial:origin:xyz = (1.4999999, 1.96, 0.8)
            matrix4d xformOp:transform = ( (2.220446049250313e-16, -1, 0, 0), (1, 2.220446049250313e-16, 0, 0), (0, 0, 1, 0), (1.5, 1.96, 0.8, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def Mesh "aruco_marker_0__aruco_marker_0__link_0_geom_visual_0_aruco_marker_0" (
                prepend apiSchemas = ["UrdfLinkVisualAPI", "UrdfGeometryMeshAPI", "MaterialBindingAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/aruco_marker_0.usda@</aruco_marker_0>
            )
            {
                rel material:binding = </isr_testbed/world/aruco_marker_0__aruco_marker_0__link_0/aruco_marker_0__aruco_marker_0__link_0_geom_visual_0_aruco_marker_0/Materials/Material>
                rel mujoco:geom:material = </mujoco/asset/materials/Material>
                rel mujoco:geom:mesh = </mujoco/asset/meshes/aruco_marker_0_0_10000000149011612_0_10000000149011612_0_10000000149011612>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.1, 0.1, 0.1)
                uniform token mujoco:geom:type = "mesh"
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [1]
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/obj/aruco_marker_0.obj@
                float3 urdf:geometry:mesh:scale = (0.1, 0.1, 0.1)
                rel urdf:visual:material = </urdf/robot/materials/Material>
                float3 urdf:visual:origin:rpy = (0, -0, 0)
                point3f urdf:visual:origin:xyz = (0, 0, 0)
                matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def Scope "Materials"
                {
                    def Material "Material" (
                        prepend references = @./isr_testbed/materials/usd/Material.usda@</Material>
                    )
                    {
                    }
                }
            }

            def Mesh "aruco_marker_0__aruco_marker_0__link_0_geom_collision_0_aruco_marker_0" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "UrdfLinkCollisionAPI", "UrdfGeometryMeshAPI", "MujocoGeomAPI"]
                prepend references = @./isr_testbed/meshes/usd/aruco_marker_0.usda@</aruco_marker_0>
            )
            {
                rel mujoco:geom:mesh = </mujoco/asset/meshes/aruco_marker_0_0_10000000149011612_0_10000000149011612_0_10000000149011612>
                point3f mujoco:geom:pos = (0, 0, 0)
                quatf mujoco:geom:quat = (1, 0, 0, 0)
                vector3f mujoco:geom:size = (0.1, 0.1, 0.1)
                uniform token mujoco:geom:type = "mesh"
                uniform token physics:approximation = "convexHull"
                bool physics:collisionEnabled = 1
                color3f[] primvars:displayColor = [(0.9, 0.9, 0.9)]
                float[] primvars:displayOpacity = [0]
                float3 urdf:collision:origin:rpy = (0, -0, 0)
                point3f urdf:collision:origin:xyz = (0, 0, 0)
                asset urdf:geometry:mesh:filename = @./isr_testbed/meshes/stl/aruco_marker_0.stl@
                float3 urdf:geometry:mesh:scale = (0.1, 0.1, 0.1)
                token visibility = "invisible"
                matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]
            }
        }
    }
}

def Mujoco "mujoco"
{
    string mujoco:model = "isr_testbed"

    def MujocoAsset "asset"
    {
        def MujocoMesh "meshes"
        {
            def MujocoMesh "construction_cone_10_0_10_0_10_0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/construction_cone.stl@
                float3 mujoco:mesh:scale = (10, 10, 10)
            }

            def MujocoMesh "cafe_table_1_0_1_0_0_6000000238418579"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/cafe_table.obj@
                float3 mujoco:mesh:scale = (1, 1, 0.6)
            }

            def MujocoMesh "fire_hydrant"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/fire_hydrant.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "pine_tree"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/pine_tree.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "standing_1_0_0_9592107534408569_1_0391894578933716"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/standing.stl@
                float3 mujoco:mesh:scale = (1, 0.95921075, 1.0391895)
            }

            def MujocoMesh "wardrobe_0_9992033839225769_1_0007959604263306_1_0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/wardrobe.stl@
                float3 mujoco:mesh:scale = (0.9992034, 1.000796, 1)
            }

            def MujocoMesh "pizza_box"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/pizza_box.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "basmati_rice_1_5_1_0_1_0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/basmati_rice.obj@
                float3 mujoco:mesh:scale = (1.5, 1, 1)
            }

            def MujocoMesh "tea_box"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/tea_box.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "plastic_cup"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/plastic_cup.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "shelf_0_15000000596046448_0_20000000298023224_0_20000000298023224"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/shelf.stl@
                float3 mujoco:mesh:scale = (0.15, 0.2, 0.2)
            }

            def MujocoMesh "lamp_ikea_arstid_1_0_1_0_2_0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/lamp_ikea_arstid.stl@
                float3 mujoco:mesh:scale = (1, 1, 2)
            }

            def MujocoMesh "plant_floor_small"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/plant_floor_small.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "apple_juice_box"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/apple_juice_box.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "table_bedside_1_7000000476837158_1_7000000476837158_0_8999999761581421"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/table_bedside.obj@
                float3 mujoco:mesh:scale = (1.7, 1.7, 0.9)
            }

            def MujocoMesh "instance_0_009"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/instance_0_009.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "bedroom_nightstand"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/bedroom_nightstand.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "dinning_room_table"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/dinning_room_table.stl@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "table_living_room_1_5_1_2000000476837158_1_399999976158142"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/table_living_room.obj@
                float3 mujoco:mesh:scale = (1.5, 1.2, 1.4)
            }

            def MujocoMesh "cabinet_diamondback_1_7999999523162842_1_0_1_0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/cabinet_diamondback.stl@
                float3 mujoco:mesh:scale = (1.8, 1, 1)
            }

            def MujocoMesh "cabinet_ikea_galant_0_7999956011772156_1_200002908706665_0_800000011920929"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/cabinet_ikea_galant.obj@
                float3 mujoco:mesh:scale = (0.7999956, 1.2000029, 0.8)
            }

            def MujocoMesh "tray_blue_white_0_6000000238418579_0_6000000238418579_0_800000011920929"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/tray_blue_white.stl@
                float3 mujoco:mesh:scale = (0.6, 0.6, 0.8)
            }

            def MujocoMesh "simple_chair_001"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/simple_chair_001.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "sofa_001"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/sofa_001.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "tv_chair1d01d01d0"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/tv_chair1d01d01d0.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "tv_001"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/tv_001.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "tv_table_001"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/obj/tv_table_001.obj@
                float3 mujoco:mesh:scale = (1, 1, 1)
            }

            def MujocoMesh "aruco_marker_0_0_10000000149011612_0_10000000149011612_0_10000000149011612"
            {
                asset mujoco:mesh:file = @isr_testbed/meshes/stl/aruco_marker_0.stl@
                float3 mujoco:mesh:scale = (0.1, 0.1, 0.1)
            }
        }

        def MujocoMaterial "materials"
        {
            def MujocoMaterial "_1___Default"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/Construction_Cone_Diffuse>
            }

            def MujocoMaterial "Blue1"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/Wood_Floor_Dark>
            }

            def MujocoMaterial "Firehydrant"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/fire_hydrant_diffuse>
            }

            def MujocoMaterial "Branch_2"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.64, 0.64, 0.64, 1)
            }

            def MujocoMaterial "v2_Skin"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/young_lightskinned_male_diffuse>
            }

            def MujocoMaterial "pizza_box_white"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/pizza_box_white>
            }

            def MujocoMaterial "basmati_rice_top"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/basmati_rice_top>
            }

            def MujocoMaterial "material"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (1, 1, 1, 1)
            }

            def MujocoMaterial "default"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.789854, 0.813333, 0.694044, 1)
            }

            def MujocoMaterial "material_2"
            {
                color4f mujoco:material:rgba = (0, 0, 0, 1)
            }

            def MujocoMaterial "apple_juice_bottom"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/apple_juice_bottom>
            }

            def MujocoMaterial "CIMG0283"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/CIMG0283>
            }

            def MujocoMaterial "material_001"
            {
                float mujoco:material:emission = 0
                color4f mujoco:material:rgba = (0.643137, 0.698039, 0.733333, 1)
            }

            def MujocoMaterial "Material_001"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/wood_cherry_texture>
            }

            def MujocoMaterial "wohnzimmertisch"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/table_living_room>
            }

            def MujocoMaterial "cabinet_ikea_galant_sides"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/cabinet_ikea_galant_sides>
            }

            def MujocoMaterial "__Color_007_4"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/wood_bamboo_texture>
            }

            def MujocoMaterial "Wood_Bamboo_Medium_001"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/wood_bamboo_texture>
            }

            def MujocoMaterial "material_9"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/black_color_texture>
            }

            def MujocoMaterial "Material_003"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/dark_wood_texture>
            }

            def MujocoMaterial "Material"
            {
                rel mujoco:material:texture = </mujoco/asset/textures/aruco_mark_0>
            }
        }

        def MujocoTexture "textures"
        {
            def MujocoTexture "Construction_Cone_Diffuse"
            {
                asset mujoco:texture:file = @Construction_Cone_Diffuse.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "Wood_Floor_Dark"
            {
                asset mujoco:texture:file = @Wood_Floor_Dark.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "fire_hydrant_diffuse"
            {
                asset mujoco:texture:file = @fire_hydrant_diffuse.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "young_lightskinned_male_diffuse"
            {
                asset mujoco:texture:file = @young_lightskinned_male_diffuse.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "pizza_box_white"
            {
                asset mujoco:texture:file = @pizza_box_white.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "basmati_rice_top"
            {
                asset mujoco:texture:file = @basmati_rice_top.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "apple_juice_bottom"
            {
                asset mujoco:texture:file = @apple_juice_bottom.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "CIMG0283"
            {
                asset mujoco:texture:file = @CIMG0283.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "wood_cherry_texture"
            {
                asset mujoco:texture:file = @wood_cherry_texture.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "table_living_room"
            {
                asset mujoco:texture:file = @table_living_room.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "cabinet_ikea_galant_sides"
            {
                asset mujoco:texture:file = @cabinet_ikea_galant_sides.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "wood_bamboo_texture"
            {
                asset mujoco:texture:file = @wood_bamboo_texture.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "black_color_texture"
            {
                asset mujoco:texture:file = @black_color_texture.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "dark_wood_texture"
            {
                asset mujoco:texture:file = @dark_wood_texture.png@
                string mujoco:texture:type = "2d"
            }

            def MujocoTexture "aruco_mark_0"
            {
                asset mujoco:texture:file = @aruco_mark_0.png@
                string mujoco:texture:type = "2d"
            }
        }
    }

    def MujocoEquality "equality"
    {
    }
}

