#usda 1.0
(
    defaultPrim = "M_MilkBox"
    upAxis = "Z"
)

def Material "M_MilkBox" (
    assetInfo = {
        asset identifier = @../../../../../../ApartmentECAI/Assets/Game/Demos/Assets/Giang/M_MilkBox.usda@
        string name = "M_MilkBox"
        dictionary unreal = {
            string assetType = "Material"
            string contentPath = "/Game/Demos/Assets/Giang/M_MilkBox.M_MilkBox"
            string engineVersion = "5.3.2-29314046+++UE5+Release-5.3"
            string exportTime = "2024.03.27-09.56.48"
        }
        string version = "C862C9EA62B84EF10E3791B9E288C0B34E8DEEE4"
    }
)
{
    token inputs:stPrimvarName = "st"
    token outputs:surface.connect = </M_MilkBox/SurfaceShader.outputs:surface>
    token outputs:unreal:surface.connect = </M_MilkBox/UnrealShader.outputs:out>

    def Shader "UnrealShader"
    {
        uniform token info:implementationSource = "sourceAsset"
        uniform asset info:unreal:sourceAsset = @/Game/Demos/Assets/Giang/M_MilkBox.M_MilkBox@
        token outputs:out
    }

    def Shader "SurfaceShader"
    {
        uniform token info:id = "UsdPreviewSurface"
        float inputs:anisotropy = 0
        color3f inputs:diffuseColor.connect = </M_MilkBox/diffuseTexture.outputs:rgb>
        float inputs:metallic = 0
        float inputs:occlusion = 1
        float inputs:roughness = 0.49803925
        float inputs:specular = 0.49803925
        token outputs:surface
    }

    def Shader "PrimvarReader"
    {
        uniform token info:id = "UsdPrimvarReader_float2"
        string inputs:varname.connect = </M_MilkBox.inputs:stPrimvarName>
        token outputs:result
    }

    def Shader "diffuseTexture"
    {
        uniform token info:id = "UsdUVTexture"
        float4 inputs:fallback = (0, 0, 0, 1)
        asset inputs:file = @Textures/Game_Demos_Assets_Giang_M_MilkBox_BaseColor.png@
        token inputs:sourceColorSpace = "sRGB"
        float2 inputs:st.connect = </M_MilkBox/PrimvarReader.outputs:result>
        token inputs:wrapS = "repeat"
        token inputs:wrapT = "repeat"
        color3f outputs:rgb
    }
}

