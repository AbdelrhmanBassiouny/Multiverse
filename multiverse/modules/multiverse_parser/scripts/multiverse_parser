#!/usr/bin/env python3

import argparse
import os
import numpy

from multiverse_parser import InertiaSource
from multiverse_parser import UrdfImporter, MjcfImporter
from multiverse_parser import UrdfExporter, MjcfExporter

source = shader_input.GetConnectedSource()[0]
        if len(source.GetOutputs()) != 1:
            raise NotImplementedError("Multiple outputs are not supported yet.")
        output = source.GetOutputs()[0]
        output_prim = output.GetPrim()
        if not output_prim.IsA(UsdShade.Shader):
            raise NotImplementedError("Only shader output is supported.")
        output_shader = UsdShade.Shader(output_prim)
        if output_shader.GetIdAttr().Get() != "UsdUVTexture":
            raise NotImplementedError("Only texture shader is supported.")
        file_input = output_shader.GetInput("file").Get()
        if file_input is None:
            raise NotImplementedError("Only texture file input is supported.")
        file_path = file_input.path
        if os.path.relpath(file_path):
            file_path = os.path.join(os.path.dirname(shader.GetPrim().GetStage().GetRootLayer().realPath),
                                     file_path)
        return os.path.normpath(file_path)
def main():
    parser = argparse.ArgumentParser(description="Multiverse parser")
    parser.add_argument(
        "--input",
        type=str,
        required=True,
        help="Import scene description as (URDF, MJCF, WORLD or USD)",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        help="Export scene description as (URDF, MJCF, WORLD or USD)",
    )
    parser.add_argument(
        "--relative_to_ros_package",
        type=str,
        required=False,
        help="The path to the ROS package that contains the URDF file (only for output URDF)",
    )
    parser.set_defaults(relative_to_ros_package=None)
    parser.add_argument(
        "--physics",
        action='store_true',
        help="Whether to include physics properties or not",
    )
    parser.set_defaults(physics=True)
    parser.add_argument(
        "--visual",
        action='store_true',
        help="Whether to include visual meshes or not",
    )
    parser.set_defaults(visual=True)
    parser.add_argument(
        "--collision",
        action='store_true',
        help="Whether to include collision meshes or not",
    )
    parser.set_defaults(collision=True)
    parser.add_argument(
        "--keepusd",
        action='store_true',
        help="Whether to keep the USD file or not",
    )
    parser.set_defaults(keepusd=False)
    parser.add_argument(
        "--inertiasource",
        type=str,
        required=False,
        help="Where to get the inertia from (from_src or from_mesh)",
    )
    parser.set_defaults(inertiasource="from_src")
    parser.add_argument(
        "--defaultrgba",
        nargs="+",
        type=float,
        help="The default color of the meshes",
    )
    parser.set_defaults(defaultrgba=numpy.array([1.0, 0.0, 0.0, 0.1]))

    args = parser.parse_args()

    in_extension = os.path.splitext(args.input)[1]
    out_extension = os.path.splitext(args.output)[1]

    if args.inertiasource == "from_mesh":
        inertia_source = InertiaSource.FROM_MESH
    elif args.inertiasource == "from_src":
        inertia_source = InertiaSource.FROM_SRC
    else:
        raise NotImplementedError(f"Inertia source {args.inertiasource} is not supported yet.")

    if in_extension in [".usd", ".usda", ".usdc"]:
        raise NotImplementedError("Importing from USD is not supported yet.")
    elif in_extension == ".urdf":
        factory = UrdfImporter(file_path=args.input,
                               with_physics=args.physics,
                               with_visual=args.visual,
                               with_collision=args.collision,
                               inertia_source=inertia_source,
                               default_rgba=args.defaultrgba)
    elif in_extension == ".xml":
        factory = MjcfImporter(file_path=args.input,
                               with_physics=args.physics,
                               with_visual=args.visual,
                               with_collision=args.collision,
                               inertia_source=inertia_source,
                               default_rgba=args.defaultrgba)
    else:
        raise NotImplementedError(f"Importing from {in_extension} is not supported yet.")

    factory.import_model()

    if out_extension in [".usd", ".usda", ".usdc"]:
        output_usd_path = os.path.join(os.path.dirname(args.output), os.path.splitext(args.output)[0] + ".usda")
        factory.save_tmp_model(usd_file_path=str(output_usd_path))
    elif out_extension == ".xml":
        exporter = MjcfExporter(file_path=args.output,
                                factory=factory)
        exporter.build()
        exporter.export(keep_usd=args.keepusd)
    elif out_extension == ".urdf":
        exporter = UrdfExporter(file_path=args.output,
                                factory=factory,
                                relative_to_ros_package=args.relative_to_ros_package)
        exporter.build()
        exporter.export(keep_usd=args.keepusd)
    else:
        raise NotImplementedError(f"Exporting to {out_extension} is not supported yet.")


if __name__ == "__main__":
    main()
