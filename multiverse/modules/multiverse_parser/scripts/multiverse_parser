#!/usr/bin/env python3.10

from __future__ import print_function
import sys

sys.path = [sys_path for sys_path in sys.path if "USD/lib/python" not in sys_path]

import argparse
import os
from multiverse_parser import UrdfImporter, MjcfImporter, UsdImporter
from multiverse_parser import UrdfExporter, MjcfExporter


def main():
    parser = argparse.ArgumentParser(description="Multiverse parser")
    parser.add_argument(
        "--input",
        type=str,
        required=True,
        help="Import scene description as (URDF, MJCF, WORLD or USD)",
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        help="Export scene description as (URDF, MJCF, WORLD or USD)",
    )
    parser.add_argument(
        "--physics",
        action=argparse.BooleanOptionalAction,
        help="Whether to include physics properties or not",
    )
    parser.set_defaults(physics=True)
    parser.add_argument(
        "--visual",
        action=argparse.BooleanOptionalAction,
        help="Whether to include visual meshes or not",
    )
    parser.set_defaults(visual=True)
    parser.add_argument(
        "--collision",
        action=argparse.BooleanOptionalAction,
        help="Whether to include collision meshes or not",
    )
    parser.set_defaults(collision=True)
    parser.add_argument(
        "--keepusd",
        action=argparse.BooleanOptionalAction,
        help="Whether to keep the USD file or not",
    )
    parser.set_defaults(keepusd=False)

    args = parser.parse_args()
    in_extension = os.path.splitext(args.input)[1]
    out_extension = os.path.splitext(args.output)[1]
    if in_extension in [".usd", ".usda", ".usdc"]:
        importer = UsdImporter(usd_file_path=args.input, with_physics=args.physics, with_visual=args.visual, with_collision=args.collision) 
    elif in_extension == ".urdf":
        importer = UrdfImporter(urdf_file_path=args.input, with_physics=args.physics, with_visual=args.visual, with_collision=args.collision) 
    elif in_extension == ".xml":
        importer = MjcfImporter(mjcf_file_path=args.input, with_physics=args.physics, with_visual=args.visual, with_collision=args.collision)
    else:
        print(f"Input extension [{in_extension}] not supported.")
        return
    
    world_builder = importer.world_builder

    if args.keepusd or out_extension in [".usd", ".usda", ".usdc"]:
        if out_extension not in [".usd", ".usda", ".usdc"]:
            out_extension = ".usda"
        usd_file_path = os.path.join(os.path.dirname(args.output), os.path.splitext(args.output)[0] + out_extension)
        world_builder.export(usd_file_path)
    if out_extension == ".urdf":
        UrdfExporter(urdf_file_path=args.output, world_builder=world_builder, with_physics=args.physics, with_visual=args.visual, with_collision=args.collision)
    elif out_extension == ".xml":
        MjcfExporter(mjcf_file_path=args.output, world_builder=world_builder, with_physics=args.physics, with_visual=args.visual, with_collision=args.collision)
    elif out_extension == ".usdz":
        print(f"Output extension [{out_extension}] not supported, try .usd, .usda or .usdc instead.")
    elif out_extension not in [".usd", ".usda", ".usdc"]:
        print(f"Output extension [{out_extension}] not supported.")

    world_builder.clean_up()


if __name__ == "__main__":
    main()
