#usda 1.0
(
    defaultPrim = "world"
    metersPerUnit = 1
    subLayers = [
        @/media/giang/Storage/UniverSim/universim_ws/src/universim/universim_knowledge/examples/box_scenario/box_scenario_TBox.usda@
    ]
    upAxis = "Z"
)

def Xform "world"
{
    def Xform "box" (
        prepend apiSchemas = ["PhysicsMassAPI", "SemanticTagAPI"]
    )
    {
        point3f physics:centerOfMass = (0, 0, -0.034677908)
        float3 physics:diagonalInertia = (0.089647055, 0.08021242, 0.075281166)
        float physics:mass = 0
        prepend rel semanticTag:semanticLabel = </boxscenarioTBox/_class_Box>
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0.17, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Cube "geom_1" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.17, 0, 0, 0), (0, 0.16, 0, 0), (0, 0, 0.0025, 0), (0, 0, -0.1675, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_2" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.002578, 0, 0, 0), (0, 0.16, 0, 0), (0, 0, 0.1675, 0), (0.167578, 0, -0.0025, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_3" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.002578, 0, 0, 0), (0, 0.16, 0, 0), (0, 0, 0.1675, 0), (-0.167578, 0, -0.0025, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_4" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.170156, 0, 0, 0), (0, 0.0025, 0, 0), (0, 0, 0.1675, 0), (0, 0.1575, -0.0025, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "geom_5" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.170156, 0, 0, 0), (0, 0.0025, 0, 0), (0, 0, 0.1675, 0), (0, -0.1575, -0.0025, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def PhysicsRevoluteJoint "box_flap_1_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/box>
            rel physics:body1 = </world/box_flap_1>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (0.17, 0, 0.166)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, -0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, -0.7071068, 0, 0)
            float physics:lowerLimit = -89.95438
            float physics:upperLimit = 269.29016
        }

        def PhysicsRevoluteJoint "box_flap_2_joint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </world/box>
            rel physics:body1 = </world/box_flap_2>
            bool physics:collisionEnabled = 0
            point3f physics:localPos0 = (-0.17, 0, 0.168)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7071068, 0.7071068, 0, 0)
            quatf physics:localRot1 = (0.7071068, 0.7071068, 0, 0)
            float physics:lowerLimit = -89.95438
            float physics:upperLimit = 269.29016
        }
    }

    def Xform "box_flap_1" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (-0.17, -1.5240808e-9, -3.309755e-9)
        float3 physics:diagonalInertia = (0.0039196294, 0.0020787641, 0.0018410094)
        float physics:mass = 0.21652657
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.8, 0, -0.6, 0), (0, 1, 0, 0), (0.6, 0, -0.8, 0), (0.17, 0, 0.34, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_6" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @box/usd/BoxFlap1.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (-2.220446049250313e-16, 0, 1.0000000000000002, 0), (0, -1.0000000000000004, 0, 0), (1.0000000000000002, 0, -2.220446049250313e-16, 0), (-0.1700000072951671, -1.5240807574521301e-9, -3.3097549890378998e-9, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "box_flap_2" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        point3f physics:centerOfMass = (0.17000002, -3.8535852e-10, -1.7394634e-12)
        float3 physics:diagonalInertia = (0.0039196294, 0.0020787637, 0.0018410094)
        float physics:mass = 0.21652657
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (-0.77, 0, 0.64, 0), (-0, 1, 0, 0), (-0.64, -0, -0.77, 0), (-0.17, 0, 0.34, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_7" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @box/usd/BoxFlap2.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(1, 0.8, 0)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (-2.220446049250313e-16, 0, 1.0000000000000002, 0), (0, -1.0000000000000004, 0, 0), (1.0000000000000002, 0, -2.220446049250313e-16, 0), (0.17000000947241017, -3.853585327311238e-10, -1.7394634132564953e-12, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "cat" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI", "SemanticTagAPI"]
    )
    {
        point3f physics:centerOfMass = (1.1589759e-7, -0.0030464365, 0.09314733)
        float3 physics:diagonalInertia = (0.005019804, 0.0038922601, 0.0015858749)
        float physics:mass = 1.1450002
        bool physics:rigidBodyEnabled = 1
        prepend rel semanticTag:semanticLabel = </boxscenarioTBox/_class_Cat>
        matrix4d xformOp:transform = ( (0.033, 0.0065, -1, 0), (-0.31, -0.95, -0.017, 0), (-0.95, 0.31, -0.029, 0), (0.1, 0.46, 0.032, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "geom_8" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
            prepend references = @cat/usd/cat.usda@
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            float[] primvars:displayOpacity = [1]
            matrix4d xformOp:transform = ( (0.9999999999934279, -0.000003400104312257195, 0.0000012583493548569828, 0), (2.117582368135751e-22, 0.3470842744659124, 0.9378339439466196, 0), (-0.0000036254865098492593, -0.937833943940456, 0.3470842744636313, 0), (1.1589759504366095e-7, -0.0030464363770440228, 0.09314732677864689, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }
}

